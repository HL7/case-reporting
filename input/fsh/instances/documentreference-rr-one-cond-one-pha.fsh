Instance: documentreference-rr-one-cond-one-pha
InstanceOf: DocumentReference
Usage: #example
* status = #current
* type = $loinc#88085-6 "Reportability response report Document Public health"
* category = $us-core-documentreference-category#clinical-note "Clinical Note"
* category.text = "Additional reporting needs"
* subject = Reference(Patient/patient-ecr-eve-everywoman) "Eve Everywoman"
* date = "2021-08-02T22:13:23Z"
* author = Reference(Organization/organization-ecr-salem-medical-center)
* content.attachment.contentType = #application/fhir+xml
* content.attachment.data = "PEJ1bmRsZSB4bWxucz0iaHR0cDovL2hsNy5vcmcvZmhpciI+CiAgPGlkIHZhbHVlPSJidW5kbGUtcnItZG9jdW1lbnQtb25lLWNvbmQtb25lLXBoYSIgLz4KICA8bWV0YT4KICAgIDxwcm9maWxlIHZhbHVlPSJodHRwOi8vaGw3Lm9yZy9maGlyL3VzL2Vjci9TdHJ1Y3R1cmVEZWZpbml0aW9uL3JyLWRvY3VtZW50LWJ1bmRsZSIgLz4KICA8L21ldGE+CiAgPGlkZW50aWZpZXI+CiAgICA8c3lzdGVtIHZhbHVlPSJ1cm46aWV0ZjpyZmM6Mzk4NiIgLz4KICAgIDx2YWx1ZSB2YWx1ZT0idXJuOnV1aWQ6MmJlNGI0ZTQtNmRmMS00Y2IyLWE5NDctYzcwZmEwZWRhMzRkIiAvPgogIDwvaWRlbnRpZmllcj4KICA8dHlwZSB2YWx1ZT0iZG9jdW1lbnQiIC8+CiAgPHRpbWVzdGFtcCB2YWx1ZT0iMjAyMS0wOC0wMlQyMjoxMzoyM1oiIC8+CiAgPGVudHJ5PgogICAgPGZ1bGxVcmwgdmFsdWU9Imh0dHA6Ly9leGFtcGxlLm9yZy9maGlyL0NvbXBvc2l0aW9uL2NvbXBvc2l0aW9uLXJyLW9uZS1jb25kLW9uZS1waGEiIC8+CiAgICA8cmVzb3VyY2U+CiAgICAgIDxDb21wb3NpdGlvbj4KICAgICAgICA8aWQgdmFsdWU9ImNvbXBvc2l0aW9uLXJyLW9uZS1jb25kLW9uZS1waGEiIC8+CiAgICAgICAgPG1ldGE+CiAgICAgICAgICA8dmVyc2lvbklkIHZhbHVlPSI2IiAvPgogICAgICAgICAgPGxhc3RVcGRhdGVkIHZhbHVlPSIyMDIxLTA4LTE3VDAzOjM3OjI3LjA2MCswMDowMCIgLz4KICAgICAgICAgIDxzb3VyY2UgdmFsdWU9IiMwTG9RZkhzZW5WRzY5ZDEzIiAvPgogICAgICAgICAgPHByb2ZpbGUgdmFsdWU9Imh0dHA6Ly9obDcub3JnL2ZoaXIvdXMvZWNyL1N0cnVjdHVyZURlZmluaXRpb24vcnItY29tcG9zaXRpb24iIC8+CiAgICAgICAgPC9tZXRhPgogICAgICAgIDxleHRlbnNpb24gdXJsPSJodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vY29tcG9zaXRpb24tY2xpbmljYWxkb2N1bWVudC12ZXJzaW9uTnVtYmVyIj4KICAgICAgICAgIDx2YWx1ZVN0cmluZyB2YWx1ZT0iMSIgLz4KICAgICAgICA8L2V4dGVuc2lvbj4KICAgICAgICA8ZXh0ZW5zaW9uIHVybD0iaHR0cDovL2hsNy5vcmcvZmhpci91cy9lY3IvU3RydWN0dXJlRGVmaW5pdGlvbi91cy1waC1pbmZvcm1hdGlvbi1yZWNpcGllbnQtZXh0ZW5zaW9uIj4KICAgICAgICAgIDx2YWx1ZVJlZmVyZW5jZT4KICAgICAgICAgICAgPHJlZmVyZW5jZSB2YWx1ZT0iUHJhY3RpdGlvbmVyUm9sZS9wcmFjdGl0aW9uZXJyb2xlLWhlbnJ5LXNldmVuIiAvPgogICAgICAgICAgPC92YWx1ZVJlZmVyZW5jZT4KICAgICAgICA8L2V4dGVuc2lvbj4KICAgICAgICA8aWRlbnRpZmllcj4KICAgICAgICAgIDxzeXN0ZW0gdmFsdWU9Imh0dHA6Ly9hY21lLm9yZy9pZGVudGlmaWVycyIgLz4KICAgICAgICAgIDx2YWx1ZSB2YWx1ZT0iUlIxMjM0NyIgLz4KICAgICAgICA8L2lkZW50aWZpZXI+CiAgICAgICAgPHN0YXR1cyB2YWx1ZT0iZmluYWwiIC8+CiAgICAgICAgPHR5cGU+CiAgICAgICAgICA8Y29kaW5nPgogICAgICAgICAgICA8c3lzdGVtIHZhbHVlPSJodHRwOi8vbG9pbmMub3JnIiAvPgogICAgICAgICAgICA8Y29kZSB2YWx1ZT0iODgwODUtNiIgLz4KICAgICAgICAgICAgPGRpc3BsYXkgdmFsdWU9IlJlcG9ydGFiaWxpdHkgcmVzcG9uc2UgcmVwb3J0IERvY3VtZW50IFB1YmxpYyBoZWFsdGgiIC8+CiAgICAgICAgICA8L2NvZGluZz4KICAgICAgICA8L3R5cGU+CiAgICAgICAgPHN1YmplY3Q+CiAgICAgICAgICA8cmVmZXJlbmNlIHZhbHVlPSJQYXRpZW50L3BhdGllbnQtZWNyLWV2ZS1ldmVyeXdvbWFuIiAvPgogICAgICAgICAgPGRpc3BsYXkgdmFsdWU9IkV2ZSBFdmVyeXdvbWFuIiAvPgogICAgICAgIDwvc3ViamVjdD4KICAgICAgICA8ZW5jb3VudGVyPgogICAgICAgICAgPHJlZmVyZW5jZSB2YWx1ZT0iRW5jb3VudGVyL2VuY291bnRlci1laWNyLWV2ZS1ldmVyeXdvbWFuLW91dHBhdGllbnQiIC8+CiAgICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iQW1idWxhdG9yeSBPZmZpY2UgVmlzaXQiIC8+CiAgICAgICAgPC9lbmNvdW50ZXI+CiAgICAgICAgPGRhdGUgdmFsdWU9IjIwMTgtMDctMTlUMDQ6MDk6MDZaIiAvPgogICAgICAgIDxhdXRob3I+CiAgICAgICAgICA8cmVmZXJlbmNlIHZhbHVlPSJPcmdhbml6YXRpb24vb3JnYW5pemF0aW9uLWVjci1oZWFsdGgtYXV0aG9yaXR5LXdlc3QiIC8+CiAgICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iSGVhbHRoIEF1dGhvcml0eSBXZXN0LCA3Nzc3IEhlYWx0aCBBdXRob3JpdHkgRHJpdmUsIEFubiBBcmJvciBNSSwgOTk5OTkiIC8+CiAgICAgICAgPC9hdXRob3I+CiAgICAgICAgPHRpdGxlIHZhbHVlPSJSZXBvcnRhYmlsaXR5IFJlc3BvbnNlIC0gT25lIENvbmRpdGlvbi9PbmUgUEhBIGV4YW1wbGUiIC8+CiAgICAgICAgPGN1c3RvZGlhbj4KICAgICAgICAgIDxyZWZlcmVuY2UgdmFsdWU9Ik9yZ2FuaXphdGlvbi9vcmdhbml6YXRpb24tZWNyLWhlYWx0aC1hdXRob3JpdHktd2VzdCIgLz4KICAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJIZWFsdGggQXV0aG9yaXR5IFdlc3QsIDc3NzcgSGVhbHRoIEF1dGhvcml0eSBEcml2ZSwgQW5uIEFyYm9yIE1JLCA5OTk5OSIgLz4KICAgICAgICA8L2N1c3RvZGlhbj4KICAgICAgICA8c2VjdGlvbj4KICAgICAgICAgIDx0aXRsZSB2YWx1ZT0iUmVwb3J0YWJpbGl0eSBSZXNwb25zZSBTdWJqZWN0IFNlY3Rpb24iIC8+CiAgICAgICAgICA8Y29kZT4KICAgICAgICAgICAgPGNvZGluZz4KICAgICAgICAgICAgICA8c3lzdGVtIHZhbHVlPSJodHRwOi8vbG9pbmMub3JnIiAvPgogICAgICAgICAgICAgIDxjb2RlIHZhbHVlPSI4ODA4NC05IiAvPgogICAgICAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJSZXBvcnRhYmxlIGNvbmRpdGlvbiByZXNwb25zZSBpbmZvcm1hdGlvbiBhbmQgc3VtbWFyeSBEb2N1bWVudCIgLz4KICAgICAgICAgICAgPC9jb2Rpbmc+CiAgICAgICAgICA8L2NvZGU+CiAgICAgICAgICA8dGV4dD4KICAgICAgICAgICAgPHN0YXR1cyB2YWx1ZT0iZ2VuZXJhdGVkIiAvPgogICAgICAgICAgICA8ZGl2IHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sIj4KICAgICAgICAgICAgICA8cD5QdWJsaWMgSGVhbHRoIFJlcG9ydGluZyBDb21tdW5pY2F0aW9uOiBvbmUgb3IgbW9yZSBjb25kaXRpb25zIGFyZSByZXBvcnRhYmxlLCBvciBtYXkgYmUgcmVwb3J0YWJsZSB0byBwdWJsaWMgaGVhbHRoPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvdGV4dD4KICAgICAgICA8L3NlY3Rpb24+CiAgICAgICAgPHNlY3Rpb24+CiAgICAgICAgICA8ZXh0ZW5zaW9uIHVybD0iaHR0cDovL2hsNy5vcmcvZmhpci91cy9lY3IvU3RydWN0dXJlRGVmaW5pdGlvbi9yci1laWNyLXByb2Nlc3Npbmctc3RhdHVzLWV4dGVuc2lvbiI+CiAgICAgICAgICAgIDxleHRlbnNpb24gdXJsPSJlSUNSUHJvY2Vzc2luZ1N0YXR1cyI+CiAgICAgICAgICAgICAgPHZhbHVlUmVmZXJlbmNlPgogICAgICAgICAgICAgICAgPHJlZmVyZW5jZSB2YWx1ZT0iT2JzZXJ2YXRpb24vb2JzZXJ2YXRpb24tcnItZWljci1wcm9jZXNzaW5nLXN0YXR1cyIgLz4KICAgICAgICAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJlSUNSIHdhcyBwcm9jZXNzZWQgLSB3aXRoIGEgd2FybmluZyIgLz4KICAgICAgICAgICAgICA8L3ZhbHVlUmVmZXJlbmNlPgogICAgICAgICAgICA8L2V4dGVuc2lvbj4KICAgICAgICAgICAgPGV4dGVuc2lvbiB1cmw9ImVJQ1JWYWxpZGF0aW9uT3V0cHV0Ij4KICAgICAgICAgICAgICA8dmFsdWVBdHRhY2htZW50PgogICAgICAgICAgICAgICAgPGNvbnRlbnRUeXBlIHZhbHVlPSJ0ZXh0L2h0bWwiIC8+CiAgICAgICAgICAgICAgICA8ZGF0YQogICAgICAgICAgICAgICAgICB2YWx1ZT0iUEdoMGJXd2dlRzFzYm5NOUltaDBkSEE2THk5M2QzY3Vkek11YjNKbkx6RTVPVGt2ZUdoMGJXd2lJSGh0Ykc1ek9uaHphVDBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01TOVlUVXhUWTJobGJXRXRhVzV6ZEdGdVkyVWlQZzBLSUNBZ0lDQWdJQ0FnSUR4b1pXRmtQZzBLSUNBZ0lDQWdJQ0FnSUNBZ1BIUnBkR3hsUGlCU1pYTjFiSFJ6SUR3dmRHbDBiR1UrRFFvZ0lDQWdJQ0FnSUNBZ0lDQThjM1I1YkdVZ2RIbHdaVDBpZEdWNGRDOWpjM01pUGlBOEwzTjBlV3hsUGcwS0lDQWdJQ0FnSUNBZ0lEd3ZhR1ZoWkQ0TkNpQWdJQ0FnSUNBZ0lDQThZbTlrZVQ0TkNpQWdJQ0FnSUNBZ0lDQWdJRHgwWVdKc1pUNE5DaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BIUm9aV0ZrUGcwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4MGNqNE5DaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHgwYUQ1VFpYWmxjbWwwZVR3dmRHZytEUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4ZEdnK1JHVnpZM0pwY0hScGIyNDhMM1JvUGcwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BIUm9Qa1pwYkdVOEwzUm9QZzBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhSb1BreHZZMkYwYVc5dVBDOTBhRDROQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDNSeVBnMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwzUm9aV0ZrUGcwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4ZEdKdlpIaytEUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSFJ5UGcwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BIUmtQbVZ5Y205eVBDOTBaRDROQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4MFpENVRTRTlWVEVRZ1kyOXVkR0ZwYmlCNlpYSnZJRzl5SUc5dVpTQmJNQzR1TVYwZ2MyVjBTV1FnS0VOUFRrWTZNVEE1T0Mwek1qYzFNaWt1UEM5MFpENE5DaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHgwWkQ1RFJFRlNNbDlKUjE5UVNFTlNYMUl5WDFKU1gwUXhYekl3TVRkUFExUmZVMEZOVUV4RkxuaHRiRHd2ZEdRK0RRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThkR1ErRFFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeHdQbE4wWVhKMElHeHBibVVnTkRFMU9qY3dQQzl3UGcwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BDOTBaRDROQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDNSeVBnMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeDBjajROQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4MFpENWxjbkp2Y2p3dmRHUStEUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4ZEdRK1UwaFBWVXhFSUdOdmJuUmhhVzRnZW1WeWJ5QnZjaUJ2Ym1VZ1d6QXVMakZkSUhabGNuTnBiMjVPZFcxaVpYSWdLRU5QVGtZNk1UQTVPQzB6TWpjMU15a3VQQzkwWkQ0TkNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeDBaRDVEUkVGU01sOUpSMTlRU0VOU1gxSXlYMUpTWDBReFh6SXdNVGRQUTFSZlUwRk5VRXhGTG5odGJEd3ZkR1ErRFFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGRHUStEUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4d1BsTjBZWEowSUd4cGJtVWdOREUxT2pjd1BDOXdQZzBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEM5MFpENE5DaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThMM1J5UGcwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDNSaWIyUjVQZzBLSUNBZ0lDQWdJQ0FnSUNBZ1BDOTBZV0pzWlQ0TkNpQWdJQ0FnSUNBZ0lDQThMMkp2WkhrK0RRb2dJQ0FnSUNBZ0lEd3ZhSFJ0YkQ0PSIKICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgIDwvdmFsdWVBdHRhY2htZW50PgogICAgICAgICAgICA8L2V4dGVuc2lvbj4KICAgICAgICAgIDwvZXh0ZW5zaW9uPgogICAgICAgICAgPGV4dGVuc2lvbiB1cmw9Imh0dHA6Ly9obDcub3JnL2ZoaXIvdXMvZWNyL1N0cnVjdHVyZURlZmluaXRpb24vcnItZWljci1yZWNlaXB0LXRpbWUtZXh0ZW5zaW9uIj4KICAgICAgICAgICAgPHZhbHVlRGF0ZVRpbWUgdmFsdWU9IjIwMTgtMDctMThUMDQ6MDk6MDZaIiAvPgogICAgICAgICAgPC9leHRlbnNpb24+CiAgICAgICAgICA8dGl0bGUgdmFsdWU9IkVsZWN0cm9uaWMgSW5pdGlhbCBDYXNlIFJlcG9ydCBTZWN0aW9uIiAvPgogICAgICAgICAgPGNvZGU+CiAgICAgICAgICAgIDxjb2Rpbmc+CiAgICAgICAgICAgICAgPHN5c3RlbSB2YWx1ZT0iaHR0cDovL2xvaW5jLm9yZyIgLz4KICAgICAgICAgICAgICA8Y29kZSB2YWx1ZT0iODgwODItMyIgLz4KICAgICAgICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iSW5pdGlhbCBjYXNlIHJlcG9ydCBwcm9jZXNzaW5nIGluZm9ybWF0aW9uIERvY3VtZW50IiAvPgogICAgICAgICAgICA8L2NvZGluZz4KICAgICAgICAgIDwvY29kZT4KICAgICAgICAgIDxlbnRyeT4KICAgICAgICAgICAgPHJlZmVyZW5jZSB2YWx1ZT0iRG9jdW1lbnRSZWZlcmVuY2UvZG9jdW1lbnRyZWZlcmVuY2UtZWljci1leGFtcGxlIiAvPgogICAgICAgICAgICA8aWRlbnRpZmllcj4KICAgICAgICAgICAgICA8c3lzdGVtIHZhbHVlPSJ1cm46aWV0ZjpyZmM6Mzk4NiIgLz4KICAgICAgICAgICAgICA8dmFsdWUgdmFsdWU9InVybjp1dWlkOmRiNzM0NjQ3LWZjOTktNDI0Yy1hODY0LTdlM2NkYTgyZTcwMyIgLz4KICAgICAgICAgICAgPC9pZGVudGlmaWVyPgogICAgICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iZUlDUl9Eb2N1bWVudC54bWwiIC8+CiAgICAgICAgICA8L2VudHJ5PgogICAgICAgIDwvc2VjdGlvbj4KICAgICAgICA8c2VjdGlvbj4KICAgICAgICAgIDxleHRlbnNpb24gdXJsPSJodHRwOi8vaGw3Lm9yZy9maGlyL3VzL2Vjci9TdHJ1Y3R1cmVEZWZpbml0aW9uL3JyLXByaW9yaXR5LWV4dGVuc2lvbiI+CiAgICAgICAgICAgIDx2YWx1ZUNvZGVhYmxlQ29uY2VwdD4KICAgICAgICAgICAgICA8Y29kaW5nPgogICAgICAgICAgICAgICAgPHN5c3RlbSB2YWx1ZT0idXJuOm9pZDoyLjE2Ljg0MC4xLjExNDIyMi40LjUuMjc0IiAvPgogICAgICAgICAgICAgICAgPGNvZGUgdmFsdWU9IlJSVlMxNyIgLz4KICAgICAgICAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJJbW1lZGlhdGUgYWN0aW9uIHJlcXVpcmVkIiAvPgogICAgICAgICAgICAgIDwvY29kaW5nPgogICAgICAgICAgICA8L3ZhbHVlQ29kZWFibGVDb25jZXB0PgogICAgICAgICAgPC9leHRlbnNpb24+CiAgICAgICAgICA8dGl0bGUgdmFsdWU9IlJlcG9ydGFiaWxpdHkgUmVzcG9uc2UgU3VtbWFyeSBTZWN0aW9uIiAvPgogICAgICAgICAgPGNvZGU+CiAgICAgICAgICAgIDxjb2Rpbmc+CiAgICAgICAgICAgICAgPHN5c3RlbSB2YWx1ZT0iaHR0cDovL2xvaW5jLm9yZyIgLz4KICAgICAgICAgICAgICA8Y29kZSB2YWx1ZT0iNTUxMTItNyIgLz4KICAgICAgICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iRG9jdW1lbnQgc3VtbWFyeSIgLz4KICAgICAgICAgICAgPC9jb2Rpbmc+CiAgICAgICAgICA8L2NvZGU+CiAgICAgICAgICA8dGV4dD4KICAgICAgICAgICAgPHN0YXR1cyB2YWx1ZT0iZ2VuZXJhdGVkIiAvPgogICAgICAgICAgICA8ZGl2IHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sIj4KICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgIDxiPlN1bW1hcnk6PC9iPgogICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICA8cD5Zb3VyIG9yZ2FuaXphdGlvbiBlbGVjdHJvbmljYWxseSBzdWJtaXR0ZWQgYW4gaW5pdGlhbCBjYXNlIHJlcG9ydCB0byBkZXRlcm1pbmUgaWYgcmVwb3J0aW5nIHRvIHB1YmxpYyBoZWFsdGggaXMgbmVlZGVkIGZvciBhIHBhdGllbnQuICZxdW90O1ppa2EgdmlydXMgZGlzZWFzZSAoZGlzb3JkZXIpJnF1b3Q7IGlzIHJlcG9ydGFibGUgdG8gJnF1b3Q7U3RhdGUgRGVwYXJ0bWVudCBvZiBIZWFsdGgmcXVvdDsuCiAgICAgICAgICAgICAgICBBbiBpbml0aWFsIGNhc2UgcmVwb3J0IHdhcyBzZW50IHRvICZxdW90O1N0YXRlIERlcGFydG1lbnQgb2YgSGVhbHRoJnF1b3Q7LiBBZGRpdGlvbmFsIGluZm9ybWF0aW9uIG1heSBiZSByZXF1aXJlZCBmb3IgdGhpcyByZXBvcnQuIDxiciAvPgogICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgPGI+JnF1b3Q7WmlrYSB2aXJ1cyBkaXNlYXNlIChkaXNvcmRlcikmcXVvdDsgZm9yICZxdW90O1N0YXRlIERlcGFydG1lbnQgb2YgSGVhbHRoJnF1b3Q7PC9iPgogICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICA8cD5SZXBvcnRpbmcgaXMgcmVxdWlyZWQgd2l0aGluICZxdW90OzI0IGhvdXJzJnF1b3Q7LiBSZXBvcnRpbmcgdG8gdGhpcyBQdWJsaWMgSGVhbHRoIEFnZW5jeSBpcyBiYXNlZCBvbiAmcXVvdDtib3RoIHBhdGllbnQgaG9tZSBhZGRyZXNzIGFuZCBwcm92aWRlciBmYWNpbGl0eSBhZGRyZXNzJnF1b3Q7LiA8L3A+CiAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICA8cD5Mb2NhbCBtb3NxdWl0by1ib3JuZSBaaWthIHZpcnVzIHRyYW5zbWlzc2lvbiB3YXMgcmVwb3J0ZWQgaW4geW91ciBhcmVhLiBJbmNyZWFzZWQgd2F0Y2hmdWxuZXNzIGZvciBzeW1wdG9tcyBvZiBaaWthIHZpcnVzIGluIHlvdXIgcGF0aWVudHMgaXMgd2FycmFudGVkLiAoSW1tZWRpYXRlIGFjdGlvbiByZXF1ZXN0ZWQpPC9wPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgPHA+QWRkaXRpb25hbCBpbmZvcm1hdGlvbiBmb3IgdGhlIHJlcXVpcmVkIHJlcG9ydGluZyBvZiBaaWthIG11c3QgYmUgc3VibWl0dGVkIHRvIFN0YXRlIERlcGFydG1lbnQgb2YgSGVhbHRoIGltbWVkaWF0ZWx5LiBUaGlzIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gY2FuIGJlIHN1Ym1pdHRlZCBoZXJlLiAoIDxhCiAgICAgICAgICAgICAgICAgICAgICBocmVmPSJodHRwOi8vc3RhdGVkZXBhcnRtZW50b2ZoZWFsdGguZ292L2VwaS9kaXNlYXNlL3ppa2EvU3VwcGxlbWVudGFsX2RhdGFfZm9ybS5wZGYiPkxpbms8L2E+IC0gSW1tZWRpYXRlIGFjdGlvbiByZXF1aXJlZCkgPC9wPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgPHA+WmlrYSBoYXMgcGFydGljdWxhciByaXNrcyBmb3IgcHJlZ25hbnQgd29tZW4uIEZvbGxvdy11cCBndWlkYW5jZSBmb3IgcHJlZ25hbnQgd29tZW4gYW5kIGNvdXBsZXMgd2hvIGFyZSBwbGFubmluZyBwcmVnbmFuY3kuICggPGEgaHJlZj0iaHR0cDovL3N0YXRlZGVwYXJ0bWVudG9maGVhbHRoLmdvdi9lcGkvZGlzZWFzZXMvemlrYS9aaWthX1ZpcnVzX1Rlc3RpbmdfR3VpZGFuY2UucGRmIj5MaW5rPC9hPgogICAgICAgICAgICAgICAgICAgIC0gSW1tZWRpYXRlIGFjdGlvbiByZXF1ZXN0ZWQpIDwvcD4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgIDxwPkZ1cnRoZXIgTGFib3JhdG9yeSB0ZXN0aW5nIGZvciBaaWthIG1heSBiZSBuZWVkZWQuIEd1aWRhbmNlIGZvciBhZGRpdGlvbmFsIHRlc3RpbmcgYW5kIHNwZWNpbWVuIGNvbGxlY3Rpb24gKCA8YSBocmVmPSJodHRwOi8vc3RhdGVkZXBhcnRtZW50b2ZoZWFsdGguZ292L2VwaS9kaXNlYXNlcy96aWthL1ppa2FfVmlydXNfVGVzdGluZ19HdWlkYW5jZS5wZGYiPkxpbms8L2E+IC0gQWN0aW9uCiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdGVkKSA8L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICA8cD5Gb3JtcyBmb3Igc3VibWl0dGluZyBmdXJ0aGVyIFppa2EgbGFib3JhdG9yeSB0ZXN0aW5nICggPGEgaHJlZj0iaHR0cDovL3N0YXRlZGVwYXJ0bWVudG9maGVhbHRoLmdvdi9lcGkvZGlzZWFzZXMvemlrYS96aWthX3Rlc3RfcmVxdWVzdF9mb3JtX1VQSEwueGxzeCI+TGluazwvYT4gLSBJbmZvcm1hdGlvbiBvbmx5KSA8L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICA8cD5UcmVhdG1lbnQgZ3VpZGFuY2UgKCA8YSBocmVmPSJodHRwOi8vc3RhdGVkZXBhcnRtZW50b2ZoZWFsdGguZ292L2VwaS9kaXNlYXNlcy96aWthL1ppa2FfVmlydXNfVGVzdGluZ19HdWlkYW5jZS5wZGYiPkxpbms8L2E+IC0gSW5mb3JtYXRpb24gb25seSkgPC9wPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgPHA+SWYgeW91IGhhdmUgYWRkaXRpb25hbCBxdWVzdGlvbnMgcmVnYXJkaW5nIFppa2Egb3IgcmVwb3J0aW5nLCBjb250YWN0IGluZm9ybWF0aW9uIGZvciB0aGUgU3RhdGUgRGVwYXJ0bWVudCBvZiBIZWFsdGggaXMgYXZhaWxhYmxlIGhlcmUuICggPGEKICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Imh0dHA6Ly9zdGF0ZWRlcGFydG1lbnRvZmhlYWx0aC5nb3YvZXBpL2Rpc2Vhc2VzL3ppa2EvWmlrYV9WaXJ1c19UZXN0aW5nX0d1aWRhbmNlLnBkZiI+TGluazwvYT4gLSBJbmZvcm1hdGlvbiBPbmx5KSA8L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgPHA+QWRkaXRpb25hbCBSZXNvdXJjZXMgKEluZm9ybWF0aW9uIG9ubHkpOjwvcD4KICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgIDxwPkNvbnRyb2wgYW5kIHByZXZlbnRpb24gaW5mb3JtYXRpb24gZm9yIHByb3ZpZGVycyAoIDxhIGhyZWY9Imh0dHA6Ly9zdGF0ZWRlcGFydG1lbnRvZmhlYWx0aC5nb3YvZXBpL2Rpc2Vhc2VzL3ppa2EvcGxhbi5wZGYiPkxpbms8L2E+KSA8L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICA8cD5EZXRhaWxlZCBjb25kaXRpb24gcmVmZXJlbmNlcyAoIDxhIGhyZWY9Imh0dHA6Ly9zdGF0ZWRlcGFydG1lbnRvZmhlYWx0aC5nb3YvZXBpL2Rpc2Vhc2VzL3ppa2EvcGxhbi5wZGYiPkxpbms8L2E+KSA8L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICA8cD5QcmV2YWxlbmNlIGluIFN0YXRlICggPGEgaHJlZj0iaHR0cDovL3N0YXRlZGVwYXJ0bWVudG9maGVhbHRoLmdvdi9lcGkvZGlzZWFzZXMvemlrYS9wbGFuLnBkZiI+TGluazwvYT4pIDwvcD4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgIDxwPkNEQyB3ZWJwYWdlICggPGEgaHJlZj0iaHR0cHM6Ly93d3cuY2RjLmdvdi96aWthL2luZGV4Lmh0bWwiPkxpbms8L2E+KSA8L3A+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICA8cD5QYXRpZW50IGluZm9ybWF0aW9uIGZhY3RzaGVldCAoIDxhIGhyZWY9Imh0dHA6Ly9zdGF0ZWRlcGFydG1lbnRvZmhlYWx0aC5nb3YvZXBpL2Rpc2Vhc2VzL3ppa2EvZmFjdHNoZWV0LnBkZiI+TGluazwvYT4pIDwvcD4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgIDxwPlN0YXRlIFJlc2lkZW50IGluZm9ybWF0aW9uICggPGEgaHJlZj0iaHR0cDovL3N0YXRlZGVwYXJ0bWVudG9maGVhbHRoLmdvdi9lcGkvZGlzZWFzZXMvemlrYS9aaWthVmlydXNfUUFfU3RhdGVET0gucGRmIj5MaW5rPC9hPikgPC9wPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvdGV4dD4KICAgICAgICAgIDxlbnRyeT4KICAgICAgICAgICAgPHJlZmVyZW5jZSB2YWx1ZT0iT2JzZXJ2YXRpb24vb2JzZXJ2YXRpb24tcnItc3VtbWFyeSIgLz4KICAgICAgICAgICAgPGRpc3BsYXkgdmFsdWU9IlJlcG9ydGFiaWxpdHkgUmVzcG9uc2UgU3VtbWFyeSIgLz4KICAgICAgICAgIDwvZW50cnk+CiAgICAgICAgICA8ZW50cnk+CiAgICAgICAgICAgIDxyZWZlcmVuY2UgdmFsdWU9Ik9ic2VydmF0aW9uL29ic2VydmF0aW9uLXJyLXJlbGV2YW50LXJlcG9ydGFibGUtY29uZGl0aW9uLW9ic2VydmF0aW9uIiAvPgogICAgICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iUmVsZXZhbnQgcmVwb3J0YWJsZSBjb25kaXRpb246IFppa2EiIC8+CiAgICAgICAgICA8L2VudHJ5PgogICAgICAgIDwvc2VjdGlvbj4KICAgICAgPC9Db21wb3NpdGlvbj4KICAgIDwvcmVzb3VyY2U+CiAgPC9lbnRyeT4KICA8ZW50cnk+CiAgICA8ZnVsbFVybCB2YWx1ZT0iaHR0cDovL2V4YW1wbGUub3JnL2ZoaXIvT2JzZXJ2YXRpb24vb2JzZXJ2YXRpb24tcnItcmVsZXZhbnQtcmVwb3J0YWJsZS1jb25kaXRpb24tb2JzZXJ2YXRpb24iIC8+CiAgICA8cmVzb3VyY2U+CiAgICAgIDxPYnNlcnZhdGlvbj4KICAgICAgICA8aWQgdmFsdWU9Im9ic2VydmF0aW9uLXJyLXJlbGV2YW50LXJlcG9ydGFibGUtY29uZGl0aW9uLW9ic2VydmF0aW9uIiAvPgogICAgICAgIDxtZXRhPgogICAgICAgICAgPHZlcnNpb25JZCB2YWx1ZT0iNCIgLz4KICAgICAgICAgIDxsYXN0VXBkYXRlZCB2YWx1ZT0iMjAyMS0wOC0xN1QwNzo1OTowMS4wNDArMDA6MDAiIC8+CiAgICAgICAgICA8c291cmNlIHZhbHVlPSIjclUydHp2YU5yd2NnMG1SSSIgLz4KICAgICAgICAgIDxwcm9maWxlIHZhbHVlPSJodHRwOi8vaGw3Lm9yZy9maGlyL3VzL2Vjci9TdHJ1Y3R1cmVEZWZpbml0aW9uL3JyLXJlbGV2YW50LXJlcG9ydGFibGUtY29uZGl0aW9uLW9ic2VydmF0aW9uIiAvPgogICAgICAgIDwvbWV0YT4KICAgICAgICA8dGV4dD4KICAgICAgICAgIDxzdGF0dXMgdmFsdWU9ImdlbmVyYXRlZCIgLz4KICAgICAgICAgIDxkaXYgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwiPiBUaGUgUlIgUmVsZXZhbnQgUmVwb3J0YWJsZSBDb25kaXRpb24gT2JzZXJ2YXRpb24gZG9lcyBub3QgY29udGFpbiBuYXJyYXRpdmUgdGV4dC4gVGhlIGluZm9ybWF0aW9uIGZyb20gdGhpcyByZXNvdXJjZSBpcyBwYXJzZWQgYW5kIGNvbnRhaW5lZCBpbiA8YQogICAgICAgICAgICAgIGhyZWY9IlN0cnVjdHVyZURlZmluaXRpb24tcnItY29tcG9zaXRpb24tZGVmaW5pdGlvbnMuaHRtbCNDb21wb3NpdGlvbi5zZWN0aW9uOnNsaWNlUlJTdW1tYXJ5U2VjdGlvbi50ZXh0Ij5Db21wb3NpdGlvbltyci1jb21wb3NpdGlvbl0uc2VjdGlvbjpzbGljZVJSU3VtbWFyeVNlY3Rpb24udGV4dDwvYT4gYWNjb3JkaW5nIHRvIHRoZSBndWlkbGluZXMgc2V0IG91dCBoZXJlOiA8YQogICAgICAgICAgICAgIGhyZWY9InJlcG9ydGFiaWxpdHlfcmVzcG9uc2VfbmFycmF0aXZlX2d1aWRhbmNlLmh0bWwiPlJlcG9ydGFiaWxpdHkgUmVzcG9uc2UgTmFycmF0aXZlIEd1aWRhbmNlPC9hPi4gPC9kaXY+CiAgICAgICAgPC90ZXh0PgogICAgICAgIDxzdGF0dXMgdmFsdWU9ImZpbmFsIiAvPgogICAgICAgIDxjb2RlPgogICAgICAgICAgPGNvZGluZz4KICAgICAgICAgICAgPHN5c3RlbSB2YWx1ZT0iaHR0cDovL3Nub21lZC5pbmZvL3NjdCIgLz4KICAgICAgICAgICAgPGNvZGUgdmFsdWU9IjY0NTcyMDAxIiAvPgogICAgICAgICAgPC9jb2Rpbmc+CiAgICAgICAgICA8Y29kaW5nPgogICAgICAgICAgICA8c3lzdGVtIHZhbHVlPSJodHRwOi8vbG9pbmMub3JnIiAvPgogICAgICAgICAgICA8Y29kZSB2YWx1ZT0iNzUzMjMtNiIgLz4KICAgICAgICAgIDwvY29kaW5nPgogICAgICAgICAgPHRleHQgdmFsdWU9IkNvbmRpdGlvbiIgLz4KICAgICAgICA8L2NvZGU+CiAgICAgICAgPHZhbHVlQ29kZWFibGVDb25jZXB0PgogICAgICAgICAgPGNvZGluZz4KICAgICAgICAgICAgPHN5c3RlbSB2YWx1ZT0iaHR0cDovL3Nub21lZC5pbmZvL3NjdCIgLz4KICAgICAgICAgICAgPGNvZGUgdmFsdWU9IjM5MjgwMDIiIC8+CiAgICAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJaaWthIHZpcnVzIGRpc2Vhc2UgKGRpc29yZGVyKSIgLz4KICAgICAgICAgIDwvY29kaW5nPgogICAgICAgIDwvdmFsdWVDb2RlYWJsZUNvbmNlcHQ+CiAgICAgICAgPGhhc01lbWJlcj4KICAgICAgICAgIDxyZWZlcmVuY2UgdmFsdWU9Ik9ic2VydmF0aW9uL29ic2VydmF0aW9uLXJyLXJlcG9ydGFiaWxpdHktaW5mb3JtYXRpb24tb2JzZXJ2YXRpb24iIC8+CiAgICAgICAgPC9oYXNNZW1iZXI+CiAgICAgIDwvT2JzZXJ2YXRpb24+CiAgICA8L3Jlc291cmNlPgogIDwvZW50cnk+CiAgPGVudHJ5PgogICAgPGZ1bGxVcmwgdmFsdWU9Imh0dHA6Ly9leGFtcGxlLm9yZy9maGlyL0VuY291bnRlci9lbmNvdW50ZXItZWljci1ldmUtZXZlcnl3b21hbi1vdXRwYXRpZW50IiAvPgogICAgPHJlc291cmNlPgogICAgICA8RW5jb3VudGVyPgogICAgICAgIDxpZCB2YWx1ZT0iZW5jb3VudGVyLWVpY3ItZXZlLWV2ZXJ5d29tYW4tb3V0cGF0aWVudCIgLz4KICAgICAgICA8bWV0YT4KICAgICAgICAgIDx2ZXJzaW9uSWQgdmFsdWU9IjUiIC8+CiAgICAgICAgICA8bGFzdFVwZGF0ZWQgdmFsdWU9IjIwMjEtMDctMTlUMDM6MDI6MDUuODA2KzAwOjAwIiAvPgogICAgICAgICAgPHNvdXJjZSB2YWx1ZT0iI1E1ZGxUOGVORDJVSTJENmUiIC8+CiAgICAgICAgICA8cHJvZmlsZSB2YWx1ZT0iaHR0cDovL2hsNy5vcmcvZmhpci91cy9lY3IvU3RydWN0dXJlRGVmaW5pdGlvbi9laWNyLWVuY291bnRlciIgLz4KICAgICAgICA8L21ldGE+CiAgICAgICAgPGlkZW50aWZpZXI+CiAgICAgICAgICA8c3lzdGVtIHZhbHVlPSJodHRwOi8vaG9zcGl0YWwuc21hcnRoZWFsdGhpdC5vcmciIC8+CiAgICAgICAgICA8dmFsdWUgdmFsdWU9Ijk5MzcwMTIiIC8+CiAgICAgICAgPC9pZGVudGlmaWVyPgogICAgICAgIDxzdGF0dXMgdmFsdWU9ImZpbmlzaGVkIiAvPgogICAgICAgIDxjbGFzcz4KICAgICAgICAgIDxzeXN0ZW0gdmFsdWU9Imh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtQWN0Q29kZSIgLz4KICAgICAgICAgIDxjb2RlIHZhbHVlPSJBTUIiIC8+CiAgICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iYW1idWxhdG9yeSIgLz4KICAgICAgICA8L2NsYXNzPgogICAgICAgIDx0eXBlPgogICAgICAgICAgPGNvZGluZz4KICAgICAgICAgICAgPHN5c3RlbSB2YWx1ZT0iaHR0cDovL3d3dy5hbWEtYXNzbi5vcmcvZ28vY3B0IiAvPgogICAgICAgICAgICA8Y29kZSB2YWx1ZT0iOTkyMDIiIC8+CiAgICAgICAgICA8L2NvZGluZz4KICAgICAgICAgIDx0ZXh0IHZhbHVlPSJPZmZpY2UgVmlzaXQiIC8+CiAgICAgICAgPC90eXBlPgogICAgICAgIDxzdWJqZWN0PgogICAgICAgICAgPHJlZmVyZW5jZSB2YWx1ZT0iUGF0aWVudC9wYXRpZW50LWVjci1ldmUtZXZlcnl3b21hbiIgLz4KICAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJFdmUgRXZlcnl3b21hbiIgLz4KICAgICAgICA8L3N1YmplY3Q+CiAgICAgICAgPHBhcnRpY2lwYW50PgogICAgICAgICAgPHR5cGU+CiAgICAgICAgICAgIDxjb2Rpbmc+CiAgICAgICAgICAgICAgPHN5c3RlbSB2YWx1ZT0iaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1QYXJ0aWNpcGF0aW9uVHlwZSIgLz4KICAgICAgICAgICAgICA8Y29kZSB2YWx1ZT0iQVRORCIgLz4KICAgICAgICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iYXR0ZW5kZXIiIC8+CiAgICAgICAgICAgIDwvY29kaW5nPgogICAgICAgICAgPC90eXBlPgogICAgICAgICAgPGluZGl2aWR1YWw+CiAgICAgICAgICAgIDxyZWZlcmVuY2UgdmFsdWU9IlByYWN0aXRpb25lclJvbGUvcHJhY3RpdGlvbmVycm9sZS1oZW5yeS1zZXZlbiIgLz4KICAgICAgICAgICAgPGRpc3BsYXkgdmFsdWU9IkhlbnJ5IFNldmVuLCBNRCIgLz4KICAgICAgICAgIDwvaW5kaXZpZHVhbD4KICAgICAgICA8L3BhcnRpY2lwYW50PgogICAgICAgIDxwZXJpb2Q+CiAgICAgICAgICA8c3RhcnQgdmFsdWU9IjIwMTgtMDQtMDFUMTA6MDA6MDAtMDU6MDAiIC8+CiAgICAgICAgICA8ZW5kIHZhbHVlPSIyMDE4LTA0LTAyVDEwOjE1OjAwLTA1OjAwIiAvPgogICAgICAgIDwvcGVyaW9kPgogICAgICAgIDxkaWFnbm9zaXM+CiAgICAgICAgICA8ZXh0ZW5zaW9uIHVybD0iaHR0cDovL2hsNy5vcmcvZmhpci91cy9lY3IvU3RydWN0dXJlRGVmaW5pdGlvbi9laWNyLXRyaWdnZXItY29kZS1mbGFnLWV4dGVuc2lvbiI+CiAgICAgICAgICAgIDxleHRlbnNpb24gdXJsPSJ0cmlnZ2VyQ29kZVZhbHVlU2V0Ij4KICAgICAgICAgICAgICA8dmFsdWVPaWQgdmFsdWU9InVybjpvaWQ6Mi4xNi44NDAuMS4xMTQyMjIuNC4xMS43NTA4IiAvPgogICAgICAgICAgICA8L2V4dGVuc2lvbj4KICAgICAgICAgICAgPGV4dGVuc2lvbiB1cmw9InRyaWdnZXJDb2RlVmFsdWVTZXRWZXJzaW9uIj4KICAgICAgICAgICAgICA8dmFsdWVTdHJpbmcgdmFsdWU9IjEyLzEyLzIwMTgiIC8+CiAgICAgICAgICAgIDwvZXh0ZW5zaW9uPgogICAgICAgICAgICA8ZXh0ZW5zaW9uIHVybD0idHJpZ2dlckNvZGUiPgogICAgICAgICAgICAgIDx2YWx1ZUNvZGluZz4KICAgICAgICAgICAgICAgIDxzeXN0ZW0gdmFsdWU9Imh0dHA6Ly9zbm9tZWQuaW5mby9zY3QiIC8+CiAgICAgICAgICAgICAgICA8Y29kZSB2YWx1ZT0iMzkyODAwMiIgLz4KICAgICAgICAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJaaWthIHZpcnVzIGRpc2Vhc2UgKGRpc29yZGVyKSIgLz4KICAgICAgICAgICAgICA8L3ZhbHVlQ29kaW5nPgogICAgICAgICAgICA8L2V4dGVuc2lvbj4KICAgICAgICAgIDwvZXh0ZW5zaW9uPgogICAgICAgICAgPGNvbmRpdGlvbj4KICAgICAgICAgICAgPHJlZmVyZW5jZSB2YWx1ZT0iQ29uZGl0aW9uL2NvbmRpdGlvbi1laWNyLWV2ZS1ldmVyeXdvbWFuLXppa2EiIC8+CiAgICAgICAgICA8L2NvbmRpdGlvbj4KICAgICAgICA8L2RpYWdub3Npcz4KICAgICAgICA8ZGlhZ25vc2lzPgogICAgICAgICAgPGNvbmRpdGlvbj4KICAgICAgICAgICAgPHJlZmVyZW5jZSB2YWx1ZT0iQ29uZGl0aW9uL2NvbmRpdGlvbi1laWNyLWV2ZS1ldmVyeXdvbWFuLWNvbW1vbi1jb2xkIiAvPgogICAgICAgICAgPC9jb25kaXRpb24+CiAgICAgICAgPC9kaWFnbm9zaXM+CiAgICAgICAgPGxvY2F0aW9uPgogICAgICAgICAgPGxvY2F0aW9uPgogICAgICAgICAgICA8cmVmZXJlbmNlIHZhbHVlPSJMb2NhdGlvbi9sb2NhdGlvbi1lY3Itc2FsZW0tbWVkaWNhbC1jZW50ZXIiIC8+CiAgICAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJDbGluaWMgQmxkZyBBLCBTYWxlbSBNZWRpY2FsIENlbnRlciwgNDY0NiBCcm93biBSZCwgU2FsZW0sIE1BIDAyMzY4IiAvPgogICAgICAgICAgPC9sb2NhdGlvbj4KICAgICAgICA8L2xvY2F0aW9uPgogICAgICAgIDxzZXJ2aWNlUHJvdmlkZXI+CiAgICAgICAgICA8cmVmZXJlbmNlIHZhbHVlPSJPcmdhbml6YXRpb24vb3JnYW5pemF0aW9uLWVjci1zYWxlbS1tZWRpY2FsLWNlbnRlciIgLz4KICAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJTYWxlbSBNZWRpY2FsIENlbnRlciwgMjIyMjIgSGVhbHRoIEF1dGhvcml0eSBEcml2ZSwgQW5uIEFyYm9yIE1JLCA5OTk5OSIgLz4KICAgICAgICA8L3NlcnZpY2VQcm92aWRlcj4KICAgICAgPC9FbmNvdW50ZXI+CiAgICA8L3Jlc291cmNlPgogIDwvZW50cnk+CiAgPGVudHJ5PgogICAgPGZ1bGxVcmwgdmFsdWU9Imh0dHA6Ly9leGFtcGxlLm9yZy9maGlyL09yZ2FuaXphdGlvbi9vcmdhbml6YXRpb24tZWNyLWhlYWx0aC1hdXRob3JpdHktd2VzdCIgLz4KICAgIDxyZXNvdXJjZT4KICAgICAgPE9yZ2FuaXphdGlvbj4KICAgICAgICA8aWQgdmFsdWU9Im9yZ2FuaXphdGlvbi1lY3ItaGVhbHRoLWF1dGhvcml0eS13ZXN0IiAvPgogICAgICAgIDxtZXRhPgogICAgICAgICAgPHZlcnNpb25JZCB2YWx1ZT0iNCIgLz4KICAgICAgICAgIDxsYXN0VXBkYXRlZCB2YWx1ZT0iMjAyMS0wNi0zMFQwNDoxMzoxOS4zNDgrMDA6MDAiIC8+CiAgICAgICAgICA8c291cmNlIHZhbHVlPSIjZHNzdG1IZlp1alkzMUh3eiIgLz4KICAgICAgICAgIDxwcm9maWxlIHZhbHVlPSJodHRwOi8vaGw3Lm9yZy9maGlyL3VzL2Vjci9TdHJ1Y3R1cmVEZWZpbml0aW9uL3VzLXBoLW9yZ2FuaXphdGlvbiIgLz4KICAgICAgICA8L21ldGE+CiAgICAgICAgPGlkZW50aWZpZXI+CiAgICAgICAgICA8c3lzdGVtIHZhbHVlPSJodHRwOi8vaGw3Lm9yZy5maGlyL3NpZC91cy1ucGkiIC8+CiAgICAgICAgICA8dmFsdWUgdmFsdWU9IjExNDQyMjE4NDciIC8+CiAgICAgICAgPC9pZGVudGlmaWVyPgogICAgICAgIDxhY3RpdmUgdmFsdWU9InRydWUiIC8+CiAgICAgICAgPG5hbWUgdmFsdWU9IkhlYWx0aCBBdXRob3JpdHkgV2VzdCIgLz4KICAgICAgICA8dGVsZWNvbT4KICAgICAgICAgIDxzeXN0ZW0gdmFsdWU9InBob25lIiAvPgogICAgICAgICAgPHZhbHVlIHZhbHVlPSIrMS01NTUtNTU1LTM1NTUiIC8+CiAgICAgICAgPC90ZWxlY29tPgogICAgICAgIDx0ZWxlY29tPgogICAgICAgICAgPHN5c3RlbSB2YWx1ZT0iZW1haWwiIC8+CiAgICAgICAgICA8dmFsdWUgdmFsdWU9Im1haWxAaGVhbHRoYXV0aG9yaXR5d2VzdC5nb3YiIC8+CiAgICAgICAgPC90ZWxlY29tPgogICAgICAgIDxhZGRyZXNzPgogICAgICAgICAgPGxpbmUgdmFsdWU9Ijc3NzcgSGVhbHRoIEF1dGhvcml0eSBEcml2ZSIgLz4KICAgICAgICAgIDxjaXR5IHZhbHVlPSJBbm4gQXJib3IiIC8+CiAgICAgICAgICA8c3RhdGUgdmFsdWU9Ik1JIiAvPgogICAgICAgICAgPHBvc3RhbENvZGUgdmFsdWU9Ijk5OTk5IiAvPgogICAgICAgIDwvYWRkcmVzcz4KICAgICAgPC9Pcmdhbml6YXRpb24+CiAgICA8L3Jlc291cmNlPgogIDwvZW50cnk+CiAgPGVudHJ5PgogICAgPGZ1bGxVcmwgdmFsdWU9Imh0dHA6Ly9leGFtcGxlLm9yZy9maGlyL09ic2VydmF0aW9uL29ic2VydmF0aW9uLXJyLXN1bW1hcnkiIC8+CiAgICA8cmVzb3VyY2U+CiAgICAgIDxPYnNlcnZhdGlvbj4KICAgICAgICA8aWQgdmFsdWU9Im9ic2VydmF0aW9uLXJyLXN1bW1hcnkiIC8+CiAgICAgICAgPG1ldGE+CiAgICAgICAgICA8dmVyc2lvbklkIHZhbHVlPSIxIiAvPgogICAgICAgICAgPGxhc3RVcGRhdGVkIHZhbHVlPSIyMDIxLTA3LTIxVDAwOjE1OjQ0LjM3NSswMDowMCIgLz4KICAgICAgICAgIDxzb3VyY2UgdmFsdWU9IiNEUWs3c2JZdk9mempZcVo2IiAvPgogICAgICAgICAgPHByb2ZpbGUgdmFsdWU9Imh0dHA6Ly9obDcub3JnL2ZoaXIvdXMvZWNyL1N0cnVjdHVyZURlZmluaXRpb24vcnItc3VtbWFyeSIgLz4KICAgICAgICA8L21ldGE+CiAgICAgICAgPHN0YXR1cyB2YWx1ZT0iZmluYWwiIC8+CiAgICAgICAgPGNvZGU+CiAgICAgICAgICA8Y29kaW5nPgogICAgICAgICAgICA8c3lzdGVtIHZhbHVlPSJodHRwOi8vc25vbWVkLmluZm8vc2N0IiAvPgogICAgICAgICAgICA8Y29kZSB2YWx1ZT0iMzA0NTYxMDAwIiAvPgogICAgICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iSW5mb3JtaW5nIGhlYWx0aCBjYXJlIHByb2Zlc3Npb25hbCAocHJvY2VkdXJlKSIgLz4KICAgICAgICAgIDwvY29kaW5nPgogICAgICAgIDwvY29kZT4KICAgICAgICA8dmFsdWVTdHJpbmcKICAgICAgICAgIHZhbHVlPSJZb3VyIG9yZ2FuaXphdGlvbiBlbGVjdHJvbmljYWxseSBzdWJtaXR0ZWQgYW4gaW5pdGlhbCBjYXNlIHJlcG9ydCB0byBkZXRlcm1pbmUgaWYgcmVwb3J0aW5nIHRvIHB1YmxpYyBoZWFsdGggaXMgbmVlZGVkIGZvciBhIHBhdGllbnQuICdaaWthIHZpcnVzIGRpc2Vhc2UgKGRpc29yZGVyKScgaXMgcmVwb3J0YWJsZSB0byAnU3RhdGUgRGVwYXJ0bWVudCBvZiBIZWFsdGgnLiBBbiBpbml0aWFsIGNhc2UgcmVwb3J0IHdhcyBzZW50IHRvICdTdGF0ZSBEZXBhcnRtZW50IG9mIEhlYWx0aCcuIEFkZGl0aW9uYWwgaW5mb3JtYXRpb24gbWF5IGJlIHJlcXVpcmVkIGZvciB0aGlzIHJlcG9ydC4iCiAgICAgICAgIC8+CiAgICAgIDwvT2JzZXJ2YXRpb24+CiAgICA8L3Jlc291cmNlPgogIDwvZW50cnk+CiAgPGVudHJ5PgogICAgPGZ1bGxVcmwgdmFsdWU9Imh0dHA6Ly9leGFtcGxlLm9yZy9maGlyL0RvY3VtZW50UmVmZXJlbmNlL2RvY3VtZW50cmVmZXJlbmNlLWVpY3ItZXhhbXBsZSIgLz4KICAgIDxyZXNvdXJjZT4KICAgICAgPERvY3VtZW50UmVmZXJlbmNlPgogICAgICAgIDxpZCB2YWx1ZT0iZG9jdW1lbnRyZWZlcmVuY2UtZWljci1leGFtcGxlIi8+CiAgICAgICAgPG1ldGE+CiAgICAgICAgICA8cHJvZmlsZSB2YWx1ZT0iaHR0cDovL2hsNy5vcmcvZmhpci91cy9jb3JlL1N0cnVjdHVyZURlZmluaXRpb24vdXMtY29yZS1kb2N1bWVudHJlZmVyZW5jZSIgLz4KICAgICAgICAgIDwhLS1DREEgdGVtcGxhdGVJZDogdXJuOmhsN2lpOjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjE1LjIuMy4xMDoyMDE3LTA0LTAxLS0+CiAgICAgICAgPC9tZXRhPgogICAgICAgIDxtYXN0ZXJJZGVudGlmaWVyPgogICAgICAgICAgPHN5c3RlbSB2YWx1ZT0idXJuOmlldGY6cmZjOjM5ODYiIC8+CiAgICAgICAgICA8dmFsdWUgdmFsdWU9InVybjp1dWlkOmRiNzM0NjQ3LWZjOTktNDI0Yy1hODY0LTdlM2NkYTgyZTcwMyIgLz4KICAgICAgICA8L21hc3RlcklkZW50aWZpZXI+CiAgICAgICAgPGlkZW50aWZpZXI+CiAgICAgICAgICA8c3lzdGVtIHZhbHVlPSJ1cm46b2lkOjIuMTYuODQwLjEuMTEzODgzLjE5LjUuOTk5OTkuMTkiIC8+CiAgICAgICAgICA8dmFsdWUgdmFsdWU9InNUVDk4OCMxIiAvPgogICAgICAgIDwvaWRlbnRpZmllcj4KICAgICAgICA8c3RhdHVzIHZhbHVlPSJjdXJyZW50IiAvPgogICAgICAgIDx0eXBlPgogICAgICAgICAgPGNvZGluZz4KICAgICAgICAgICAgPHN5c3RlbSB2YWx1ZT0iaHR0cDovL2xvaW5jLm9yZyIgLz4KICAgICAgICAgICAgPGNvZGUgdmFsdWU9IjU1NzUxLTIiIC8+CiAgICAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJQdWJsaWMgaGVhbHRoIENhc2UgcmVwb3J0IiAvPgogICAgICAgICAgPC9jb2Rpbmc+CiAgICAgICAgPC90eXBlPgogICAgICAgIDxjYXRlZ29yeT4KICAgICAgICAgIDxjb2Rpbmc+CiAgICAgICAgICAgIDxzeXN0ZW0gdmFsdWU9Imh0dHA6Ly9obDcub3JnL2ZoaXIvdXMvY29yZS9Db2RlU3lzdGVtL3VzLWNvcmUtZG9jdW1lbnRyZWZlcmVuY2UtY2F0ZWdvcnkiIC8+CiAgICAgICAgICAgIDxjb2RlIHZhbHVlPSJjbGluaWNhbC1ub3RlIiAvPgogICAgICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iQ2xpbmljYWwgTm90ZSIgLz4KICAgICAgICAgIDwvY29kaW5nPgogICAgICAgICAgPHRleHQgdmFsdWU9IkNsaW5pY2FsIE5vdGUiIC8+CiAgICAgICAgPC9jYXRlZ29yeT4KICAgICAgICA8c3ViamVjdD4KICAgICAgICAgIDxyZWZlcmVuY2UgdmFsdWU9IlBhdGllbnQvcGF0aWVudC1lY3ItZXZlLWV2ZXJ5d29tYW4iIC8+CiAgICAgICAgPC9zdWJqZWN0PgogICAgICAgIDxjb250ZW50PgogICAgICAgICAgPGF0dGFjaG1lbnQ+CiAgICAgICAgICAgIDxjb250ZW50VHlwZSB2YWx1ZT0idGV4dC9wbGFpbiIgLz4KICAgICAgICAgICAgPHVybCB2YWx1ZT0idXJuOmhsN2lpOjIuMTYuODQwLjEuMTEzODgzLjE5LjUuOTk5OTkuMTk6MSIgLz4KICAgICAgICAgIDwvYXR0YWNobWVudD4KICAgICAgICA8L2NvbnRlbnQ+CiAgICAgIDwvRG9jdW1lbnRSZWZlcmVuY2U+CiAgICA8L3Jlc291cmNlPgogIDwvZW50cnk+CiAgPGVudHJ5PgogICAgPGZ1bGxVcmwgdmFsdWU9Imh0dHA6Ly9leGFtcGxlLm9yZy9maGlyL1BhdGllbnQvcGF0aWVudC1lY3ItZXZlLWV2ZXJ5d29tYW4iIC8+CiAgICA8cmVzb3VyY2U+CiAgICAgIDxQYXRpZW50PgogICAgICAgIDxpZCB2YWx1ZT0icGF0aWVudC1lY3ItZXZlLWV2ZXJ5d29tYW4iIC8+CiAgICAgICAgPG1ldGE+CiAgICAgICAgICA8dmVyc2lvbklkIHZhbHVlPSIxMCIgLz4KICAgICAgICAgIDxsYXN0VXBkYXRlZCB2YWx1ZT0iMjAyMS0wOC0xN1QwODowMDozMi4zNTYrMDA6MDAiIC8+CiAgICAgICAgICA8c291cmNlIHZhbHVlPSIjempGbHpIRHZaSVlWeU1BQiIgLz4KICAgICAgICAgIDxwcm9maWxlIHZhbHVlPSJodHRwOi8vaGw3Lm9yZy9maGlyL3VzL2Vjci9TdHJ1Y3R1cmVEZWZpbml0aW9uL3VzLXBoLXBhdGllbnQiIC8+CiAgICAgICAgPC9tZXRhPgogICAgICAgIDx0ZXh0PgogICAgICAgICAgPHN0YXR1cyB2YWx1ZT0iZ2VuZXJhdGVkIiAvPgogICAgICAgICAgPGRpdiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhhcGlIZWFkZXJUZXh0Ij5FdmUgTCA8Yj5FVkVSWVdPTUFOIDwvYj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0iaGFwaVByb3BlcnR5VGFibGUiPgogICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgPHRkPklkZW50aWZpZXI8L3RkPgogICAgICAgICAgICAgICAgICA8dGQ+MTAzMjcwMjwvdGQ+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICA8dGQ+QWRkcmVzczwvdGQ+CiAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICA8c3Bhbj41MTAxIFBlYWNodHJlZSBTdCBORSA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4+QXRsYW50YSA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4+R0EgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxzcGFuPlVTIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgIDx0ZD5EYXRlIG9mIGJpcnRoPC90ZD4KICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgIDxzcGFuPjI0IE5vdmVtYmVyIDE5NzQ8L3NwYW4+CiAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L3RleHQ+CiAgICAgICAgPGV4dGVuc2lvbiB1cmw9Imh0dHA6Ly9obDcub3JnL2ZoaXIvdXMvY29yZS9TdHJ1Y3R1cmVEZWZpbml0aW9uL3VzLWNvcmUtcmFjZSI+CiAgICAgICAgICA8ZXh0ZW5zaW9uIHVybD0ib21iQ2F0ZWdvcnkiPgogICAgICAgICAgICA8dmFsdWVDb2Rpbmc+CiAgICAgICAgICAgICAgPHN5c3RlbSB2YWx1ZT0idXJuOm9pZDoyLjE2Ljg0MC4xLjExMzg4My42LjIzOCIgLz4KICAgICAgICAgICAgICA8Y29kZSB2YWx1ZT0iMjEwNi0zIiAvPgogICAgICAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJXaGl0ZSIgLz4KICAgICAgICAgICAgPC92YWx1ZUNvZGluZz4KICAgICAgICAgIDwvZXh0ZW5zaW9uPgogICAgICAgICAgPGV4dGVuc2lvbiB1cmw9InRleHQiPgogICAgICAgICAgICA8dmFsdWVTdHJpbmcgdmFsdWU9IldoaXRlIiAvPgogICAgICAgICAgPC9leHRlbnNpb24+CiAgICAgICAgPC9leHRlbnNpb24+CiAgICAgICAgPGV4dGVuc2lvbiB1cmw9Imh0dHA6Ly9obDcub3JnL2ZoaXIvdXMvY29yZS9TdHJ1Y3R1cmVEZWZpbml0aW9uL3VzLWNvcmUtZXRobmljaXR5Ij4KICAgICAgICAgIDxleHRlbnNpb24gdXJsPSJvbWJDYXRlZ29yeSI+CiAgICAgICAgICAgIDx2YWx1ZUNvZGluZz4KICAgICAgICAgICAgICA8c3lzdGVtIHZhbHVlPSJ1cm46b2lkOjIuMTYuODQwLjEuMTEzODgzLjYuMjM4IiAvPgogICAgICAgICAgICAgIDxjb2RlIHZhbHVlPSIyMTg2LTUiIC8+CiAgICAgICAgICAgICAgPGRpc3BsYXkgdmFsdWU9Ik5vdCBIaXNwYW5pYyBvciBMYXRpbm8iIC8+CiAgICAgICAgICAgIDwvdmFsdWVDb2Rpbmc+CiAgICAgICAgICA8L2V4dGVuc2lvbj4KICAgICAgICAgIDxleHRlbnNpb24gdXJsPSJ0ZXh0Ij4KICAgICAgICAgICAgPHZhbHVlU3RyaW5nIHZhbHVlPSJOb3QgSGlzcGFuaWMgb3IgTGF0aW5vIiAvPgogICAgICAgICAgPC9leHRlbnNpb24+CiAgICAgICAgPC9leHRlbnNpb24+CiAgICAgICAgPGV4dGVuc2lvbiB1cmw9Imh0dHA6Ly9obDcub3JnL2ZoaXIvdXMvY29yZS9TdHJ1Y3R1cmVEZWZpbml0aW9uL3VzLWNvcmUtYmlydGhzZXgiPgogICAgICAgICAgPHZhbHVlQ29kZSB2YWx1ZT0iRiIgLz4KICAgICAgICA8L2V4dGVuc2lvbj4KICAgICAgICA8ZXh0ZW5zaW9uIHVybD0iaHR0cDovL2hsNy5vcmcvZmhpci91cy9lY3IvU3RydWN0dXJlRGVmaW5pdGlvbi91cy1waC1nZW5kZXJpZGVudGl0eS1leHRlbnNpb24iPgogICAgICAgICAgPGV4dGVuc2lvbiB1cmw9InZhbHVlIj4KICAgICAgICAgICAgPHZhbHVlQ29kZWFibGVDb25jZXB0PgogICAgICAgICAgICAgIDxjb2Rpbmc+CiAgICAgICAgICAgICAgICA8c3lzdGVtIHZhbHVlPSJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLU51bGxGbGF2b3IiIC8+CiAgICAgICAgICAgICAgICA8Y29kZSB2YWx1ZT0iQVNLVSIgLz4KICAgICAgICAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJhc2tlZCBidXQgdW5rbm93biIgLz4KICAgICAgICAgICAgICA8L2NvZGluZz4KICAgICAgICAgICAgICA8dGV4dCB2YWx1ZT0iYXNrZWQgYnV0IHVua25vd24iIC8+CiAgICAgICAgICAgIDwvdmFsdWVDb2RlYWJsZUNvbmNlcHQ+CiAgICAgICAgICA8L2V4dGVuc2lvbj4KICAgICAgICA8L2V4dGVuc2lvbj4KICAgICAgICA8ZXh0ZW5zaW9uIHVybD0iaHR0cDovL2hsNy5vcmcvZmhpci91cy9lY3IvU3RydWN0dXJlRGVmaW5pdGlvbi91cy1waC10cmliYWwtYWZmaWxpYXRpb24tZXh0ZW5zaW9uIj4KICAgICAgICAgIDxleHRlbnNpb24gdXJsPSJUcmliZU5hbWUiPgogICAgICAgICAgICA8dmFsdWVDb2Rpbmc+CiAgICAgICAgICAgICAgPHN5c3RlbSB2YWx1ZT0iaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92My1UcmliYWxFbnRpdHlVUyIgLz4KICAgICAgICAgICAgICA8Y29kZSB2YWx1ZT0iOTEiIC8+CiAgICAgICAgICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iRm9ydCBNb2phdmUgSW5kaWFuIFRyaWJlIG9mIEFyaXpvbmEsIENhbGlmb3JuaWEgJmFtcDsgTmV2YWRhIiAvPgogICAgICAgICAgICA8L3ZhbHVlQ29kaW5nPgogICAgICAgICAgPC9leHRlbnNpb24+CiAgICAgICAgICA8ZXh0ZW5zaW9uIHVybD0iRW5yb2xsZWRUcmliZU1lbWJlciI+CiAgICAgICAgICAgIDx2YWx1ZUJvb2xlYW4gdmFsdWU9InRydWUiIC8+CiAgICAgICAgICA8L2V4dGVuc2lvbj4KICAgICAgICA8L2V4dGVuc2lvbj4KICAgICAgICA8aWRlbnRpZmllcj4KICAgICAgICAgIDx1c2UgdmFsdWU9InVzdWFsIiAvPgogICAgICAgICAgPHR5cGU+CiAgICAgICAgICAgIDxjb2Rpbmc+CiAgICAgICAgICAgICAgPHN5c3RlbSB2YWx1ZT0iaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS92Mi0wMjAzIiAvPgogICAgICAgICAgICAgIDxjb2RlIHZhbHVlPSJNUiIgLz4KICAgICAgICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iTWVkaWNhbCBSZWNvcmQgTnVtYmVyIiAvPgogICAgICAgICAgICA8L2NvZGluZz4KICAgICAgICAgIDwvdHlwZT4KICAgICAgICAgIDxzeXN0ZW0gdmFsdWU9Imh0dHA6Ly9ob3NwaXRhbC5zbWFydGhlYWx0aGl0Lm9yZyIgLz4KICAgICAgICAgIDx2YWx1ZSB2YWx1ZT0iMTAzMjcwMiIgLz4KICAgICAgICA8L2lkZW50aWZpZXI+CiAgICAgICAgPGFjdGl2ZSB2YWx1ZT0idHJ1ZSIgLz4KICAgICAgICA8bmFtZT4KICAgICAgICAgIDxmYW1pbHkgdmFsdWU9IkV2ZXJ5d29tYW4iIC8+CiAgICAgICAgICA8Z2l2ZW4gdmFsdWU9IkV2ZSIgLz4KICAgICAgICAgIDxnaXZlbiB2YWx1ZT0iTCIgLz4KICAgICAgICA8L25hbWU+CiAgICAgICAgPHRlbGVjb20+CiAgICAgICAgICA8c3lzdGVtIHZhbHVlPSJwaG9uZSIgLz4KICAgICAgICAgIDx2YWx1ZSB2YWx1ZT0iMS0oNDA0KTU1NS0xMjEyIiAvPgogICAgICAgICAgPHVzZSB2YWx1ZT0iaG9tZSIgLz4KICAgICAgICA8L3RlbGVjb20+CiAgICAgICAgPHRlbGVjb20+CiAgICAgICAgICA8c3lzdGVtIHZhbHVlPSJlbWFpbCIgLz4KICAgICAgICAgIDx2YWx1ZSB2YWx1ZT0iZXZlLmV2ZXJ5d29tYW5AZXhhbXBsZS5jb20iIC8+CiAgICAgICAgPC90ZWxlY29tPgogICAgICAgIDxnZW5kZXIgdmFsdWU9ImZlbWFsZSIgLz4KICAgICAgICA8YmlydGhEYXRlIHZhbHVlPSIxOTc0LTExLTI0IiAvPgogICAgICAgIDxkZWNlYXNlZEJvb2xlYW4gdmFsdWU9ImZhbHNlIi8+CiAgICAgICAgPGFkZHJlc3M+CiAgICAgICAgICA8bGluZSB2YWx1ZT0iNTEwMSBQZWFjaHRyZWUgU3QgTkUiIC8+CiAgICAgICAgICA8Y2l0eSB2YWx1ZT0iQXRsYW50YSIgLz4KICAgICAgICAgIDxzdGF0ZSB2YWx1ZT0iR0EiIC8+CiAgICAgICAgICA8cG9zdGFsQ29kZSB2YWx1ZT0iMzAzMDIiIC8+CiAgICAgICAgICA8Y291bnRyeSB2YWx1ZT0iVVMiIC8+CiAgICAgICAgPC9hZGRyZXNzPgogICAgICAgIDxjb21tdW5pY2F0aW9uPgogICAgICAgICAgPGxhbmd1YWdlPgogICAgICAgICAgICA8Y29kaW5nPgogICAgICAgICAgICAgIDxzeXN0ZW0gdmFsdWU9InVybjppZXRmOmJjcDo0NyIgLz4KICAgICAgICAgICAgICA8Y29kZSB2YWx1ZT0iZW4iIC8+CiAgICAgICAgICAgICAgPGRpc3BsYXkgdmFsdWU9IkVuZ2xpc2giIC8+CiAgICAgICAgICAgIDwvY29kaW5nPgogICAgICAgICAgPC9sYW5ndWFnZT4KICAgICAgICA8L2NvbW11bmljYXRpb24+CiAgICAgIDwvUGF0aWVudD4KICAgIDwvcmVzb3VyY2U+CiAgPC9lbnRyeT4KICA8ZW50cnk+CiAgICA8ZnVsbFVybCB2YWx1ZT0iaHR0cDovL2V4YW1wbGUub3JnL2ZoaXIvT2JzZXJ2YXRpb24vb2JzZXJ2YXRpb24tcnItcmVwb3J0YWJpbGl0eS1pbmZvcm1hdGlvbi1vYnNlcnZhdGlvbiIgLz4KICAgIDxyZXNvdXJjZT4KICAgICAgPE9ic2VydmF0aW9uPgogICAgICAgIDxpZCB2YWx1ZT0ib2JzZXJ2YXRpb24tcnItcmVwb3J0YWJpbGl0eS1pbmZvcm1hdGlvbi1vYnNlcnZhdGlvbiIgLz4KICAgICAgICA8bWV0YT4KICAgICAgICAgIDx2ZXJzaW9uSWQgdmFsdWU9IjEiIC8+CiAgICAgICAgICA8bGFzdFVwZGF0ZWQgdmFsdWU9IjIwMjEtMDctMjFUMDM6MTA6MTMuOTQ2KzAwOjAwIiAvPgogICAgICAgICAgPHNvdXJjZSB2YWx1ZT0iI2wwajF6RVZRMHBJZWJ5dDUiIC8+CiAgICAgICAgICA8cHJvZmlsZSB2YWx1ZT0iaHR0cDovL2hsNy5vcmcvZmhpci91cy9lY3IvU3RydWN0dXJlRGVmaW5pdGlvbi9yci1yZXBvcnRhYmlsaXR5LWluZm9ybWF0aW9uLW9ic2VydmF0aW9uIiAvPgogICAgICAgIDwvbWV0YT4KICAgICAgICA8ZXh0ZW5zaW9uIHVybD0iaHR0cDovL2hsNy5vcmcvZmhpci91cy9lY3IvU3RydWN0dXJlRGVmaW5pdGlvbi91cy1waC1kZXRlcm1pbmF0aW9uLW9mLXJlcG9ydGFiaWxpdHktZXh0ZW5zaW9uIj4KICAgICAgICAgIDx2YWx1ZUNvZGVhYmxlQ29uY2VwdD4KICAgICAgICAgICAgPGNvZGluZz4KICAgICAgICAgICAgICA8c3lzdGVtIHZhbHVlPSJ1cm46b2lkOjIuMTYuODQwLjEuMTE0MjIyLjQuNS4yNzQiIC8+CiAgICAgICAgICAgICAgPGNvZGUgdmFsdWU9IlJSVlMxIiAvPgogICAgICAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJSZXBvcnRhYmxlIiAvPgogICAgICAgICAgICA8L2NvZGluZz4KICAgICAgICAgIDwvdmFsdWVDb2RlYWJsZUNvbmNlcHQ+CiAgICAgICAgPC9leHRlbnNpb24+CiAgICAgICAgPGV4dGVuc2lvbiB1cmw9Imh0dHA6Ly9obDcub3JnL2ZoaXIvdXMvZWNyL1N0cnVjdHVyZURlZmluaXRpb24vdXMtcGgtZGV0ZXJtaW5hdGlvbi1vZi1yZXBvcnRhYmlsaXR5LXJlYXNvbi1leHRlbnNpb24iPgogICAgICAgICAgPHZhbHVlU3RyaW5nIHZhbHVlPSJDb25kaXRpb24gaXMgcmVwb3J0YWJsZSIgLz4KICAgICAgICA8L2V4dGVuc2lvbj4KICAgICAgICA8ZXh0ZW5zaW9uIHVybD0iaHR0cDovL2hsNy5vcmcvZmhpci91cy9lY3IvU3RydWN0dXJlRGVmaW5pdGlvbi91cy1waC1kZXRlcm1pbmF0aW9uLW9mLXJlcG9ydGFiaWxpdHktcnVsZS1leHRlbnNpb24iPgogICAgICAgICAgPHZhbHVlU3RyaW5nIHZhbHVlPSJEZXNjcmlwdGlvbiBvZiBydWxlIHVzZWQgaW4gcmVwb3J0YWJpbGl0eSBkZXRlcm1pbmF0aW9uIiAvPgogICAgICAgIDwvZXh0ZW5zaW9uPgogICAgICAgIDxleHRlbnNpb24gdXJsPSJodHRwOi8vaGw3Lm9yZy9maGlyL3VzL2Vjci9TdHJ1Y3R1cmVEZWZpbml0aW9uL3JyLWV4dGVybmFsLXJlc291cmNlLWV4dGVuc2lvbiI+CiAgICAgICAgICA8dmFsdWVSZWZlcmVuY2U+CiAgICAgICAgICAgIDxyZWZlcmVuY2UgdmFsdWU9IkRvY3VtZW50UmVmZXJlbmNlL2RvY3VtZW50cmVmZXJlbmNlLXppa2EtaW5mby1wZGYiIC8+CiAgICAgICAgICA8L3ZhbHVlUmVmZXJlbmNlPgogICAgICAgIDwvZXh0ZW5zaW9uPgogICAgICAgIDxleHRlbnNpb24gdXJsPSJodHRwOi8vaGw3Lm9yZy9maGlyL3VzL2Vjci9TdHJ1Y3R1cmVEZWZpbml0aW9uL3JyLWV4dGVybmFsLXJlc291cmNlLWV4dGVuc2lvbiI+CiAgICAgICAgICA8dmFsdWVSZWZlcmVuY2U+CiAgICAgICAgICAgIDxyZWZlcmVuY2UgdmFsdWU9IkRvY3VtZW50UmVmZXJlbmNlL2RvY3VtZW50cmVmZXJlbmNlLWFkZC1yZXBvcnRpbmctbmVlZHMtcGRmIiAvPgogICAgICAgICAgPC92YWx1ZVJlZmVyZW5jZT4KICAgICAgICA8L2V4dGVuc2lvbj4KICAgICAgICA8ZXh0ZW5zaW9uIHVybD0iaHR0cDovL2hsNy5vcmcvZmhpci91cy9lY3IvU3RydWN0dXJlRGVmaW5pdGlvbi9yci1leHRlcm5hbC1yZXNvdXJjZS1leHRlbnNpb24iPgogICAgICAgICAgPHZhbHVlUmVmZXJlbmNlPgogICAgICAgICAgICA8cmVmZXJlbmNlIHZhbHVlPSJEb2N1bWVudFJlZmVyZW5jZS9kb2N1bWVudHJlZmVyZW5jZS16aWthLWZvbGxvdy11cC1wZGYiIC8+CiAgICAgICAgICA8L3ZhbHVlUmVmZXJlbmNlPgogICAgICAgIDwvZXh0ZW5zaW9uPgogICAgICAgIDxzdGF0dXMgdmFsdWU9ImZpbmFsIiAvPgogICAgICAgIDxjb2RlPgogICAgICAgICAgPGNvZGluZz4KICAgICAgICAgICAgPHN5c3RlbSB2YWx1ZT0idXJuOm9pZDoyLjE2Ljg0MC4xLjExNDIyMi40LjUuMjc0IiAvPgogICAgICAgICAgICA8Y29kZSB2YWx1ZT0iUlJWUzUiIC8+CiAgICAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJQYXRpZW50IGhvbWUgYWRkcmVzcyIgLz4KICAgICAgICAgIDwvY29kaW5nPgogICAgICAgIDwvY29kZT4KICAgICAgICA8cGVyZm9ybWVyPgogICAgICAgICAgPHJlZmVyZW5jZSB2YWx1ZT0iT3JnYW5pemF0aW9uL29yZ2FuaXphdGlvbi1yci1ydWxlcy1hdXRob3JpbmctYWdlbmN5LWhhdyIgLz4KICAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJIZWFsdGggQXV0aG9yaXR5IFdlc3QgUnVsZXMgQXV0aG9yaW5nIEFnZW5jeSIgLz4KICAgICAgICA8L3BlcmZvcm1lcj4KICAgICAgICA8cGVyZm9ybWVyPgogICAgICAgICAgPHJlZmVyZW5jZSB2YWx1ZT0iT3JnYW5pemF0aW9uL29yZ2FuaXphdGlvbi1yci1yb3V0aW5nLWVudGl0eS1oYXciIC8+CiAgICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iSGVhbHRoIEF1dGhvcml0eSBXZXN0IFJvdXRpbmcgRW50aXR5IiAvPgogICAgICAgIDwvcGVyZm9ybWVyPgogICAgICAgIDxwZXJmb3JtZXI+CiAgICAgICAgICA8cmVmZXJlbmNlIHZhbHVlPSJPcmdhbml6YXRpb24vb3JnYW5pemF0aW9uLXJyLXJlc3BvbnNpYmxlLWFnZW5jeS1oYXciIC8+CiAgICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iSGVhbHRoIEF1dGhvcml0eSBXZXN0IFJvdXRpbmcgRW50aXR5IiAvPgogICAgICAgIDwvcGVyZm9ybWVyPgogICAgICAgIDxjb21wb25lbnQ+CiAgICAgICAgICA8Y29kZT4KICAgICAgICAgICAgPGNvZGluZz4KICAgICAgICAgICAgICA8c3lzdGVtIHZhbHVlPSJ1cm46b2lkOjIuMTYuODQwLjEuMTE0MjIyLjQuNS4yMzIiIC8+CiAgICAgICAgICAgICAgPGNvZGUgdmFsdWU9IlJSNCIgLz4KICAgICAgICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iVGltZWZyYW1lIHRvIHJlcG9ydCAodXJnZW5jeSkiIC8+CiAgICAgICAgICAgIDwvY29kaW5nPgogICAgICAgICAgPC9jb2RlPgogICAgICAgICAgPHZhbHVlUXVhbnRpdHk+CiAgICAgICAgICAgIDx2YWx1ZSB2YWx1ZT0iMjQiIC8+CiAgICAgICAgICAgIDx1bml0IHZhbHVlPSJIIiAvPgogICAgICAgICAgICA8c3lzdGVtIHZhbHVlPSJodHRwOi8vdW5pdHNvZm1lYXN1cmUub3JnIiAvPgogICAgICAgICAgICA8Y29kZSB2YWx1ZT0iSCIgLz4KICAgICAgICAgIDwvdmFsdWVRdWFudGl0eT4KICAgICAgICA8L2NvbXBvbmVudD4KICAgICAgPC9PYnNlcnZhdGlvbj4KICAgIDwvcmVzb3VyY2U+CiAgPC9lbnRyeT4KICA8ZW50cnk+CiAgICA8ZnVsbFVybCB2YWx1ZT0iaHR0cDovL2V4YW1wbGUub3JnL2ZoaXIvUHJhY3RpdGlvbmVyUm9sZS9wcmFjdGl0aW9uZXJyb2xlLWhlbnJ5LXNldmVuIiAvPgogICAgPHJlc291cmNlPgogICAgICA8UHJhY3RpdGlvbmVyUm9sZT4KICAgICAgICA8aWQgdmFsdWU9InByYWN0aXRpb25lcnJvbGUtaGVucnktc2V2ZW4iIC8+CiAgICAgICAgPG1ldGE+CiAgICAgICAgICA8dmVyc2lvbklkIHZhbHVlPSIxMSIgLz4KICAgICAgICAgIDxsYXN0VXBkYXRlZCB2YWx1ZT0iMjAyMS0wOC0xN1QwODowMDozMi4zNTUrMDA6MDAiIC8+CiAgICAgICAgICA8c291cmNlIHZhbHVlPSIjS0o5NDJVeHZmZFlXb0hDRiIgLz4KICAgICAgICAgIDxwcm9maWxlIHZhbHVlPSJodHRwOi8vaGw3Lm9yZy9maGlyL3VzL2Vjci9TdHJ1Y3R1cmVEZWZpbml0aW9uL3VzLXBoLXByYWN0aXRpb25lcnJvbGUiIC8+CiAgICAgICAgPC9tZXRhPgogICAgICAgIDxpZGVudGlmaWVyPgogICAgICAgICAgPHN5c3RlbSB2YWx1ZT0iaHR0cDovL2hsNy5vcmcvZmhpci9zaWQvdXMtbnBpIiAvPgogICAgICAgICAgPHZhbHVlIHZhbHVlPSI5OTQxMzM5MTA4IiAvPgogICAgICAgIDwvaWRlbnRpZmllcj4KICAgICAgICA8cHJhY3RpdGlvbmVyPgogICAgICAgICAgPHJlZmVyZW5jZSB2YWx1ZT0iUHJhY3RpdGlvbmVyL3ByYWN0aXRpb25lci11cy1jb3JlLWhlbnJ5LXNldmVuIiAvPgogICAgICAgICAgPGRpc3BsYXkgdmFsdWU9IkhlbnJ5IFNldmVuLCBNRCIgLz4KICAgICAgICA8L3ByYWN0aXRpb25lcj4KICAgICAgICA8b3JnYW5pemF0aW9uPgogICAgICAgICAgPHJlZmVyZW5jZSB2YWx1ZT0iT3JnYW5pemF0aW9uL29yZ2FuaXphdGlvbi1lY3Itc2FsZW0tbWVkaWNhbC1jZW50ZXIiIC8+CiAgICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iU2FsZW0gTWVkaWNhbCBDZW50ZXIiIC8+CiAgICAgICAgPC9vcmdhbml6YXRpb24+CiAgICAgICAgPGNvZGU+CiAgICAgICAgICA8Y29kaW5nPgogICAgICAgICAgICA8c3lzdGVtIHZhbHVlPSJodHRwOi8vbnVjYy5vcmcvcHJvdmlkZXItdGF4b25vbXkiIC8+CiAgICAgICAgICAgIDxjb2RlIHZhbHVlPSIyNjFRUDIzMDBYIiAvPgogICAgICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iUHJpbWFyeSBDYXJlIENsaW5pYy9DZW50ZXIiIC8+CiAgICAgICAgICA8L2NvZGluZz4KICAgICAgICA8L2NvZGU+CiAgICAgICAgPHNwZWNpYWx0eT4KICAgICAgICAgIDxjb2Rpbmc+CiAgICAgICAgICAgIDxzeXN0ZW0gdmFsdWU9Imh0dHA6Ly9zbm9tZWQuaW5mby9zY3QiIC8+CiAgICAgICAgICAgIDxjb2RlIHZhbHVlPSI0MTk3NzIwMDAiIC8+CiAgICAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJGYW1pbHkgcHJhY3RpY2UiIC8+CiAgICAgICAgICA8L2NvZGluZz4KICAgICAgICA8L3NwZWNpYWx0eT4KICAgICAgICA8bG9jYXRpb24+CiAgICAgICAgICA8cmVmZXJlbmNlIHZhbHVlPSJMb2NhdGlvbi9sb2NhdGlvbi1lY3Itc2FsZW0tbWVkaWNhbC1jZW50ZXIiIC8+CiAgICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iU2FsZW0gTWVkaWNhbCBDZW50ZXIiIC8+CiAgICAgICAgPC9sb2NhdGlvbj4KICAgICAgICA8dGVsZWNvbT4KICAgICAgICAgIDxzeXN0ZW0gdmFsdWU9ImVtYWlsIiAvPgogICAgICAgICAgPHZhbHVlIHZhbHVlPSJoZW5yeS5zZXZlbkBleGFtcGxlLmNvbSIgLz4KICAgICAgICA8L3RlbGVjb20+CiAgICAgIDwvUHJhY3RpdGlvbmVyUm9sZT4KICAgIDwvcmVzb3VyY2U+CiAgPC9lbnRyeT4KICA8ZW50cnk+CiAgICA8ZnVsbFVybCB2YWx1ZT0iaHR0cDovL2V4YW1wbGUub3JnL2ZoaXIvQ29uZGl0aW9uL2NvbmRpdGlvbi1laWNyLWV2ZS1ldmVyeXdvbWFuLWNvbW1vbi1jb2xkIiAvPgogICAgPHJlc291cmNlPgogICAgICA8Q29uZGl0aW9uPgogICAgICAgIDxpZCB2YWx1ZT0iY29uZGl0aW9uLWVpY3ItZXZlLWV2ZXJ5d29tYW4tY29tbW9uLWNvbGQiIC8+CiAgICAgICAgPG1ldGE+CiAgICAgICAgICA8dmVyc2lvbklkIHZhbHVlPSI2IiAvPgogICAgICAgICAgPGxhc3RVcGRhdGVkIHZhbHVlPSIyMDIxLTA3LTE1VDAxOjU0OjE0LjgzMSswMDowMCIgLz4KICAgICAgICAgIDxzb3VyY2UgdmFsdWU9IiM0ZzBacFROcWxkSEZZTHpyIiAvPgogICAgICAgICAgPHByb2ZpbGUgdmFsdWU9Imh0dHA6Ly9obDcub3JnL2ZoaXIvdXMvZWNyL1N0cnVjdHVyZURlZmluaXRpb24vdXMtcGgtY29uZGl0aW9uIiAvPgogICAgICAgIDwvbWV0YT4KICAgICAgICA8Y2F0ZWdvcnk+CiAgICAgICAgICA8Y29kaW5nPgogICAgICAgICAgICA8c3lzdGVtIHZhbHVlPSJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbmRpdGlvbi1jYXRlZ29yeSIgLz4KICAgICAgICAgICAgPGNvZGUgdmFsdWU9InByb2JsZW0tbGlzdC1pdGVtIiAvPgogICAgICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iUHJvYmxlbSBMaXN0IEl0ZW0iIC8+CiAgICAgICAgICA8L2NvZGluZz4KICAgICAgICA8L2NhdGVnb3J5PgogICAgICAgIDxjb2RlPgogICAgICAgICAgPGNvZGluZz4KICAgICAgICAgICAgPHN5c3RlbSB2YWx1ZT0iaHR0cDovL3Nub21lZC5pbmZvL3NjdCIgLz4KICAgICAgICAgICAgPGNvZGUgdmFsdWU9IjgyMjcyMDA2IiAvPgogICAgICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iQ29tbW9uIGNvbGQgKGRpc29yZGVyKSIgLz4KICAgICAgICAgIDwvY29kaW5nPgogICAgICAgIDwvY29kZT4KICAgICAgICA8c3ViamVjdD4KICAgICAgICAgIDxyZWZlcmVuY2UgdmFsdWU9IlBhdGllbnQvcGF0aWVudC1lY3ItZXZlLWV2ZXJ5d29tYW4iIC8+CiAgICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iRXZlIEV2ZXJ5d29tYW4iIC8+CiAgICAgICAgPC9zdWJqZWN0PgogICAgICAgIDxvbnNldERhdGVUaW1lIHZhbHVlPSIyMDE3LTA5LTIzIiAvPgogICAgICAgIDxhc3NlcnRlcj4KICAgICAgICAgIDxyZWZlcmVuY2UgdmFsdWU9IlByYWN0aXRpb25lci9wcmFjdGl0aW9uZXItdXMtY29yZS1oZW5yeS1zZXZlbiIgLz4KICAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJIZW5yeSBTZXZlbiwgTUQiIC8+CiAgICAgICAgPC9hc3NlcnRlcj4KICAgICAgPC9Db25kaXRpb24+CiAgICA8L3Jlc291cmNlPgogIDwvZW50cnk+CiAgPGVudHJ5PgogICAgPGZ1bGxVcmwgdmFsdWU9Imh0dHA6Ly9leGFtcGxlLm9yZy9maGlyL0xvY2F0aW9uL2xvY2F0aW9uLWVjci1zYWxlbS1tZWRpY2FsLWNlbnRlciIgLz4KICAgIDxyZXNvdXJjZT4KICAgICAgPExvY2F0aW9uPgogICAgICAgIDxpZCB2YWx1ZT0ibG9jYXRpb24tZWNyLXNhbGVtLW1lZGljYWwtY2VudGVyIiAvPgogICAgICAgIDxtZXRhPgogICAgICAgICAgPHZlcnNpb25JZCB2YWx1ZT0iNiIgLz4KICAgICAgICAgIDxsYXN0VXBkYXRlZCB2YWx1ZT0iMjAyMS0wOC0xN1QwNzo1MzowMi4wOTkrMDA6MDAiIC8+CiAgICAgICAgICA8c291cmNlIHZhbHVlPSIjVkkyTm01UHM1SHFaNUhYViIgLz4KICAgICAgICAgIDxwcm9maWxlIHZhbHVlPSJodHRwOi8vaGw3Lm9yZy9maGlyL3VzL2Vjci9TdHJ1Y3R1cmVEZWZpbml0aW9uL3VzLXBoLWxvY2F0aW9uIiAvPgogICAgICAgIDwvbWV0YT4KICAgICAgICA8aWRlbnRpZmllcj4KICAgICAgICAgIDxzeXN0ZW0gdmFsdWU9Imh0dHA6Ly9obDcub3JnLmZoaXIvc2lkL3VzLW5waSIgLz4KICAgICAgICAgIDx2YWx1ZSB2YWx1ZT0iMTE0NDIyMTk5NSIgLz4KICAgICAgICA8L2lkZW50aWZpZXI+CiAgICAgICAgPHN0YXR1cyB2YWx1ZT0iYWN0aXZlIiAvPgogICAgICAgIDxuYW1lIHZhbHVlPSJDbGluaWMgQmxkZyBBLCBTYWxlbSBNZWRpY2FsIENlbnRlciIgLz4KICAgICAgICA8dHlwZT4KICAgICAgICAgIDxjb2Rpbmc+CiAgICAgICAgICAgIDxzeXN0ZW0gdmFsdWU9Imh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjMtUm9sZUNvZGUiIC8+CiAgICAgICAgICAgIDxjb2RlIHZhbHVlPSJIT1NQIiAvPgogICAgICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iSG9zcGl0YWwiIC8+CiAgICAgICAgICA8L2NvZGluZz4KICAgICAgICA8L3R5cGU+CiAgICAgICAgPHRlbGVjb20+CiAgICAgICAgICA8c3lzdGVtIHZhbHVlPSJwaG9uZSIgLz4KICAgICAgICAgIDx2YWx1ZSB2YWx1ZT0iKCsxKSAoNTU1KTU1NS0zMDAxIiAvPgogICAgICAgIDwvdGVsZWNvbT4KICAgICAgICA8dGVsZWNvbT4KICAgICAgICAgIDxzeXN0ZW0gdmFsdWU9ImZheCIgLz4KICAgICAgICAgIDx2YWx1ZSB2YWx1ZT0iKCsxKSAoNTU1KTU1NS0zMDAyIiAvPgogICAgICAgIDwvdGVsZWNvbT4KICAgICAgICA8dGVsZWNvbT4KICAgICAgICAgIDxzeXN0ZW0gdmFsdWU9ImVtYWlsIiAvPgogICAgICAgICAgPHZhbHVlIHZhbHVlPSJtYWlsQHNtYy5vcmciIC8+CiAgICAgICAgPC90ZWxlY29tPgogICAgICAgIDxhZGRyZXNzPgogICAgICAgICAgPGxpbmUgdmFsdWU9IkNsaW5pYyBCbGRnIEEiIC8+CiAgICAgICAgICA8bGluZSB2YWx1ZT0iNDQ0NCBIZWFsdGhjYXJlIERyaXZlIiAvPgogICAgICAgICAgPGNpdHkgdmFsdWU9IkFubiBBcmJvciIgLz4KICAgICAgICAgIDxzdGF0ZSB2YWx1ZT0iTUkiIC8+CiAgICAgICAgICA8cG9zdGFsQ29kZSB2YWx1ZT0iOTk5OTkiIC8+CiAgICAgICAgPC9hZGRyZXNzPgogICAgICAgIDxtYW5hZ2luZ09yZ2FuaXphdGlvbj4KICAgICAgICAgIDxyZWZlcmVuY2UgdmFsdWU9Ik9yZ2FuaXphdGlvbi9vcmdhbml6YXRpb24tZWNyLXNhbGVtLW1lZGljYWwtY2VudGVyIiAvPgogICAgICAgIDwvbWFuYWdpbmdPcmdhbml6YXRpb24+CiAgICAgIDwvTG9jYXRpb24+CiAgICA8L3Jlc291cmNlPgogIDwvZW50cnk+CiAgPGVudHJ5PgogICAgPGZ1bGxVcmwgdmFsdWU9Imh0dHA6Ly9leGFtcGxlLm9yZy9maGlyL09yZ2FuaXphdGlvbi9vcmdhbml6YXRpb24tZWNyLXNhbGVtLW1lZGljYWwtY2VudGVyIiAvPgogICAgPHJlc291cmNlPgogICAgICA8T3JnYW5pemF0aW9uPgogICAgICAgIDxpZCB2YWx1ZT0ib3JnYW5pemF0aW9uLWVjci1zYWxlbS1tZWRpY2FsLWNlbnRlciIgLz4KICAgICAgICA8bWV0YT4KICAgICAgICAgIDx2ZXJzaW9uSWQgdmFsdWU9IjUiIC8+CiAgICAgICAgICA8bGFzdFVwZGF0ZWQgdmFsdWU9IjIwMjEtMDYtMzBUMDQ6MTM6MTkuMzQ1KzAwOjAwIiAvPgogICAgICAgICAgPHNvdXJjZSB2YWx1ZT0iI3hhNHlKWmpuNjh4VmF2b00iIC8+CiAgICAgICAgICA8cHJvZmlsZSB2YWx1ZT0iaHR0cDovL2hsNy5vcmcvZmhpci91cy9lY3IvU3RydWN0dXJlRGVmaW5pdGlvbi91cy1waC1vcmdhbml6YXRpb24iIC8+CiAgICAgICAgPC9tZXRhPgogICAgICAgIDxpZGVudGlmaWVyPgogICAgICAgICAgPHN5c3RlbSB2YWx1ZT0iaHR0cDovL2hsNy5vcmcuZmhpci9zaWQvdXMtbnBpIiAvPgogICAgICAgICAgPHZhbHVlIHZhbHVlPSI1NTU1NTU1NSIgLz4KICAgICAgICA8L2lkZW50aWZpZXI+CiAgICAgICAgPGFjdGl2ZSB2YWx1ZT0idHJ1ZSIgLz4KICAgICAgICA8bmFtZSB2YWx1ZT0iU2FsZW0gTWVkaWNhbCBDZW50ZXIiIC8+CiAgICAgICAgPHRlbGVjb20+CiAgICAgICAgICA8c3lzdGVtIHZhbHVlPSJwaG9uZSIgLz4KICAgICAgICAgIDx2YWx1ZSB2YWx1ZT0iKzEtNTU1LTU1NS0xMTExIiAvPgogICAgICAgIDwvdGVsZWNvbT4KICAgICAgICA8dGVsZWNvbT4KICAgICAgICAgIDxzeXN0ZW0gdmFsdWU9ImVtYWlsIiAvPgogICAgICAgICAgPHZhbHVlIHZhbHVlPSJtYWlsQHNhbGVtbWVkaWNhbGNlbnRlci5jb20iIC8+CiAgICAgICAgPC90ZWxlY29tPgogICAgICAgIDxhZGRyZXNzPgogICAgICAgICAgPGxpbmUgdmFsdWU9IjIyMjIyIEhlYWx0aCBBdXRob3JpdHkgRHJpdmUiIC8+CiAgICAgICAgICA8Y2l0eSB2YWx1ZT0iQW5uIEFyYm9yIiAvPgogICAgICAgICAgPHN0YXRlIHZhbHVlPSJNSSIgLz4KICAgICAgICAgIDxwb3N0YWxDb2RlIHZhbHVlPSI5OTk5OSIgLz4KICAgICAgICA8L2FkZHJlc3M+CiAgICAgIDwvT3JnYW5pemF0aW9uPgogICAgPC9yZXNvdXJjZT4KICA8L2VudHJ5PgogIDxlbnRyeT4KICAgIDxmdWxsVXJsIHZhbHVlPSJodHRwOi8vZXhhbXBsZS5vcmcvZmhpci9Db25kaXRpb24vY29uZGl0aW9uLWVpY3ItZXZlLWV2ZXJ5d29tYW4temlrYSIgLz4KICAgIDxyZXNvdXJjZT4KICAgICAgPENvbmRpdGlvbj4KICAgICAgICA8aWQgdmFsdWU9ImNvbmRpdGlvbi1laWNyLWV2ZS1ldmVyeXdvbWFuLXppa2EiIC8+CiAgICAgICAgPG1ldGE+CiAgICAgICAgICA8dmVyc2lvbklkIHZhbHVlPSI1IiAvPgogICAgICAgICAgPGxhc3RVcGRhdGVkIHZhbHVlPSIyMDIxLTA3LTE1VDAxOjU0OjE0LjgzNSswMDowMCIgLz4KICAgICAgICAgIDxzb3VyY2UgdmFsdWU9IiNyTTJQdzZnZXRqb0UyVVRWIiAvPgogICAgICAgIDwvbWV0YT4KICAgICAgICA8Y2F0ZWdvcnk+CiAgICAgICAgICA8Y29kaW5nPgogICAgICAgICAgICA8c3lzdGVtIHZhbHVlPSJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL2NvbmRpdGlvbi1jYXRlZ29yeSIgLz4KICAgICAgICAgICAgPGNvZGUgdmFsdWU9ImVuY291bnRlci1kaWFnbm9zaXMiIC8+CiAgICAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJFbmNvdW50ZXIgRGlhZ25vc2lzIiAvPgogICAgICAgICAgPC9jb2Rpbmc+CiAgICAgICAgPC9jYXRlZ29yeT4KICAgICAgICA8Y29kZT4KICAgICAgICAgIDxjb2Rpbmc+CiAgICAgICAgICAgIDxzeXN0ZW0gdmFsdWU9Imh0dHA6Ly9zbm9tZWQuaW5mby9zY3QiIC8+CiAgICAgICAgICAgIDxjb2RlIHZhbHVlPSIzOTI4MDAyIiAvPgogICAgICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iWmlrYSB2aXJ1cyBkaXNlYXNlIChkaXNvcmRlcikiIC8+CiAgICAgICAgICA8L2NvZGluZz4KICAgICAgICA8L2NvZGU+CiAgICAgICAgPHN1YmplY3Q+CiAgICAgICAgICA8cmVmZXJlbmNlIHZhbHVlPSJQYXRpZW50L3BhdGllbnQtZWNyLWV2ZS1ldmVyeXdvbWFuIiAvPgogICAgICAgICAgPGRpc3BsYXkgdmFsdWU9IkV2ZSBFdmVyeXdvbWFuIiAvPgogICAgICAgIDwvc3ViamVjdD4KICAgICAgICA8b25zZXREYXRlVGltZSB2YWx1ZT0iMjAxNy0wOC0yMyIgLz4KICAgICAgICA8YXNzZXJ0ZXI+CiAgICAgICAgICA8cmVmZXJlbmNlIHZhbHVlPSJQcmFjdGl0aW9uZXIvcHJhY3RpdGlvbmVyLXVzLWNvcmUtaGVucnktc2V2ZW4iIC8+CiAgICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iSGVucnkgU2V2ZW4sIE1EIiAvPgogICAgICAgIDwvYXNzZXJ0ZXI+CiAgICAgIDwvQ29uZGl0aW9uPgogICAgPC9yZXNvdXJjZT4KICA8L2VudHJ5PgogIDxlbnRyeT4KICAgIDxmdWxsVXJsIHZhbHVlPSJodHRwOi8vZXhhbXBsZS5vcmcvZmhpci9Pcmdhbml6YXRpb24vb3JnYW5pemF0aW9uLXJyLXJvdXRpbmctZW50aXR5LWhhdyIgLz4KICAgIDxyZXNvdXJjZT4KICAgICAgPE9yZ2FuaXphdGlvbj4KICAgICAgICA8aWQgdmFsdWU9Im9yZ2FuaXphdGlvbi1yci1yb3V0aW5nLWVudGl0eS1oYXciIC8+CiAgICAgICAgPG1ldGE+CiAgICAgICAgICA8dmVyc2lvbklkIHZhbHVlPSI0IiAvPgogICAgICAgICAgPGxhc3RVcGRhdGVkIHZhbHVlPSIyMDIxLTA2LTMwVDA0OjEzOjE5LjM1MCswMDowMCIgLz4KICAgICAgICAgIDxzb3VyY2UgdmFsdWU9IiNKeERuWDRuTjFrT2dQVE5yIiAvPgogICAgICAgICAgPHByb2ZpbGUgdmFsdWU9Imh0dHA6Ly9obDcub3JnL2ZoaXIvdXMvZWNyL1N0cnVjdHVyZURlZmluaXRpb24vcnItcm91dGluZy1lbnRpdHktb3JnYW5pemF0aW9uIiAvPgogICAgICAgIDwvbWV0YT4KICAgICAgICA8aWRlbnRpZmllcj4KICAgICAgICAgIDxzeXN0ZW0gdmFsdWU9Imh0dHA6Ly9obDcub3JnLmZoaXIvc2lkL3VzLW5waSIgLz4KICAgICAgICAgIDx2YWx1ZSB2YWx1ZT0iNDMyMTQzMjEiIC8+CiAgICAgICAgPC9pZGVudGlmaWVyPgogICAgICAgIDxhY3RpdmUgdmFsdWU9InRydWUiIC8+CiAgICAgICAgPHR5cGU+CiAgICAgICAgICA8Y29kaW5nPgogICAgICAgICAgICA8c3lzdGVtIHZhbHVlPSJ1cm46b2lkOjIuMTYuODQwLjEuMTE0MjIyLjQuNS4yMzIiIC8+CiAgICAgICAgICAgIDxjb2RlIHZhbHVlPSJSUjciIC8+CiAgICAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJSb3V0aW5nIEVudGl0eSIgLz4KICAgICAgICAgIDwvY29kaW5nPgogICAgICAgIDwvdHlwZT4KICAgICAgICA8bmFtZSB2YWx1ZT0iSGVhbHRoIEF1dGhvcml0eSBXZXN0IFJvdXRpbmcgRW50aXR5IiAvPgogICAgICAgIDx0ZWxlY29tPgogICAgICAgICAgPHN5c3RlbSB2YWx1ZT0icGhvbmUiIC8+CiAgICAgICAgICA8dmFsdWUgdmFsdWU9IisxLTU1NS01NTUtMzU1NSIgLz4KICAgICAgICA8L3RlbGVjb20+CiAgICAgICAgPHRlbGVjb20+CiAgICAgICAgICA8c3lzdGVtIHZhbHVlPSJlbWFpbCIgLz4KICAgICAgICAgIDx2YWx1ZSB2YWx1ZT0ibWFpbEBoZWFsdGhhdXRob3JpdHl3ZXN0LmdvdiIgLz4KICAgICAgICA8L3RlbGVjb20+CiAgICAgICAgPGFkZHJlc3M+CiAgICAgICAgICA8bGluZSB2YWx1ZT0iNzc3NyBIZWFsdGggQXV0aG9yaXR5IERyaXZlIiAvPgogICAgICAgICAgPGNpdHkgdmFsdWU9IkFubiBBcmJvciIgLz4KICAgICAgICAgIDxzdGF0ZSB2YWx1ZT0iTUkiIC8+CiAgICAgICAgICA8cG9zdGFsQ29kZSB2YWx1ZT0iOTk5OTkiIC8+CiAgICAgICAgPC9hZGRyZXNzPgogICAgICA8L09yZ2FuaXphdGlvbj4KICAgIDwvcmVzb3VyY2U+CiAgPC9lbnRyeT4KICA8ZW50cnk+CiAgICA8ZnVsbFVybCB2YWx1ZT0iaHR0cDovL2V4YW1wbGUub3JnL2ZoaXIvT3JnYW5pemF0aW9uL29yZ2FuaXphdGlvbi1yci1ydWxlcy1hdXRob3JpbmctYWdlbmN5LWhhdyIgLz4KICAgIDxyZXNvdXJjZT4KICAgICAgPE9yZ2FuaXphdGlvbj4KICAgICAgICA8aWQgdmFsdWU9Im9yZ2FuaXphdGlvbi1yci1ydWxlcy1hdXRob3JpbmctYWdlbmN5LWhhdyIgLz4KICAgICAgICA8bWV0YT4KICAgICAgICAgIDx2ZXJzaW9uSWQgdmFsdWU9IjQiIC8+CiAgICAgICAgICA8bGFzdFVwZGF0ZWQgdmFsdWU9IjIwMjEtMDYtMzBUMDQ6MTM6MTkuMzQ2KzAwOjAwIiAvPgogICAgICAgICAgPHNvdXJjZSB2YWx1ZT0iI25lVnVEeTRpYWZIVmw0NHYiIC8+CiAgICAgICAgICA8cHJvZmlsZSB2YWx1ZT0iaHR0cDovL2hsNy5vcmcvZmhpci91cy9lY3IvU3RydWN0dXJlRGVmaW5pdGlvbi9yci1ydWxlcy1hdXRob3JpbmctYWdlbmN5LW9yZ2FuaXphdGlvbiIgLz4KICAgICAgICA8L21ldGE+CiAgICAgICAgPGlkZW50aWZpZXI+CiAgICAgICAgICA8c3lzdGVtIHZhbHVlPSJodHRwOi8vaGw3Lm9yZy5maGlyL3NpZC91cy1ucGkiIC8+CiAgICAgICAgICA8dmFsdWUgdmFsdWU9IjEyMzQxMjM0IiAvPgogICAgICAgIDwvaWRlbnRpZmllcj4KICAgICAgICA8YWN0aXZlIHZhbHVlPSJ0cnVlIiAvPgogICAgICAgIDx0eXBlPgogICAgICAgICAgPGNvZGluZz4KICAgICAgICAgICAgPHN5c3RlbSB2YWx1ZT0idXJuOm9pZDoyLjE2Ljg0MC4xLjExNDIyMi40LjUuMjMyIiAvPgogICAgICAgICAgICA8Y29kZSB2YWx1ZT0iUlIxMiIgLz4KICAgICAgICAgICAgPGRpc3BsYXkgdmFsdWU9IlJ1bGVzIEF1dGhvcmluZyBBZ2VuY3kiIC8+CiAgICAgICAgICA8L2NvZGluZz4KICAgICAgICA8L3R5cGU+CiAgICAgICAgPG5hbWUgdmFsdWU9IkhlYWx0aCBBdXRob3JpdHkgV2VzdCBSdWxlcyBBdXRob3JpbmcgQWdlbmN5IiAvPgogICAgICAgIDx0ZWxlY29tPgogICAgICAgICAgPHN5c3RlbSB2YWx1ZT0icGhvbmUiIC8+CiAgICAgICAgICA8dmFsdWUgdmFsdWU9IisxLTU1NS01NTUtMzU1NSIgLz4KICAgICAgICA8L3RlbGVjb20+CiAgICAgICAgPHRlbGVjb20+CiAgICAgICAgICA8c3lzdGVtIHZhbHVlPSJlbWFpbCIgLz4KICAgICAgICAgIDx2YWx1ZSB2YWx1ZT0ibWFpbEBoZWFsdGhhdXRob3JpdHl3ZXN0LmdvdiIgLz4KICAgICAgICA8L3RlbGVjb20+CiAgICAgICAgPGFkZHJlc3M+CiAgICAgICAgICA8bGluZSB2YWx1ZT0iNzc3NyBIZWFsdGggQXV0aG9yaXR5IERyaXZlIiAvPgogICAgICAgICAgPGNpdHkgdmFsdWU9IkFubiBBcmJvciIgLz4KICAgICAgICAgIDxzdGF0ZSB2YWx1ZT0iTUkiIC8+CiAgICAgICAgICA8cG9zdGFsQ29kZSB2YWx1ZT0iOTk5OTkiIC8+CiAgICAgICAgPC9hZGRyZXNzPgogICAgICA8L09yZ2FuaXphdGlvbj4KICAgIDwvcmVzb3VyY2U+CiAgPC9lbnRyeT4KICA8ZW50cnk+CiAgICA8ZnVsbFVybCB2YWx1ZT0iaHR0cDovL2V4YW1wbGUub3JnL2ZoaXIvT3JnYW5pemF0aW9uL29yZ2FuaXphdGlvbi1yci1yZXNwb25zaWJsZS1hZ2VuY3ktaGF3IiAvPgogICAgPHJlc291cmNlPgogICAgICA8T3JnYW5pemF0aW9uPgogICAgICAgIDxpZCB2YWx1ZT0ib3JnYW5pemF0aW9uLXJyLXJlc3BvbnNpYmxlLWFnZW5jeS1oYXciIC8+CiAgICAgICAgPG1ldGE+CiAgICAgICAgICA8dmVyc2lvbklkIHZhbHVlPSI0IiAvPgogICAgICAgICAgPGxhc3RVcGRhdGVkIHZhbHVlPSIyMDIxLTA2LTMwVDA0OjEzOjE5LjM0OCswMDowMCIgLz4KICAgICAgICAgIDxzb3VyY2UgdmFsdWU9IiMzVTZLUTlWdnY4bFJPbFJWIiAvPgogICAgICAgICAgPHByb2ZpbGUgdmFsdWU9Imh0dHA6Ly9obDcub3JnL2ZoaXIvdXMvZWNyL1N0cnVjdHVyZURlZmluaXRpb24vcnItcmVzcG9uc2libGUtYWdlbmN5LW9yZ2FuaXphdGlvbiIgLz4KICAgICAgICA8L21ldGE+CiAgICAgICAgPGlkZW50aWZpZXI+CiAgICAgICAgICA8c3lzdGVtIHZhbHVlPSJodHRwOi8vaGw3Lm9yZy5maGlyL3NpZC91cy1ucGkiIC8+CiAgICAgICAgICA8dmFsdWUgdmFsdWU9Ijk5OTk2NjY2IiAvPgogICAgICAgIDwvaWRlbnRpZmllcj4KICAgICAgICA8YWN0aXZlIHZhbHVlPSJ0cnVlIiAvPgogICAgICAgIDx0eXBlPgogICAgICAgICAgPGNvZGluZz4KICAgICAgICAgICAgPHN5c3RlbSB2YWx1ZT0idXJuOm9pZDoyLjE2Ljg0MC4xLjExNDIyMi40LjUuMjMyIiAvPgogICAgICAgICAgICA8Y29kZSB2YWx1ZT0iUlI4IiAvPgogICAgICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iUmVzcG9uc2libGUgQWdlbmN5IiAvPgogICAgICAgICAgPC9jb2Rpbmc+CiAgICAgICAgPC90eXBlPgogICAgICAgIDxuYW1lIHZhbHVlPSJIZWFsdGggQXV0aG9yaXR5IFdlc3QgUmVzcG9uc2libGUgQWdlbmN5IiAvPgogICAgICAgIDx0ZWxlY29tPgogICAgICAgICAgPHN5c3RlbSB2YWx1ZT0icGhvbmUiIC8+CiAgICAgICAgICA8dmFsdWUgdmFsdWU9IisxLTU1NS01NTUtMzU1NSIgLz4KICAgICAgICA8L3RlbGVjb20+CiAgICAgICAgPHRlbGVjb20+CiAgICAgICAgICA8c3lzdGVtIHZhbHVlPSJlbWFpbCIgLz4KICAgICAgICAgIDx2YWx1ZSB2YWx1ZT0ibWFpbEBoZWFsdGhhdXRob3JpdHl3ZXN0LmdvdiIgLz4KICAgICAgICA8L3RlbGVjb20+CiAgICAgICAgPGFkZHJlc3M+CiAgICAgICAgICA8bGluZSB2YWx1ZT0iNzc3NyBIZWFsdGggQXV0aG9yaXR5IERyaXZlIiAvPgogICAgICAgICAgPGNpdHkgdmFsdWU9IkFubiBBcmJvciIgLz4KICAgICAgICAgIDxzdGF0ZSB2YWx1ZT0iTUkiIC8+CiAgICAgICAgICA8cG9zdGFsQ29kZSB2YWx1ZT0iOTk5OTkiIC8+CiAgICAgICAgPC9hZGRyZXNzPgogICAgICA8L09yZ2FuaXphdGlvbj4KICAgIDwvcmVzb3VyY2U+CiAgPC9lbnRyeT4KICA8ZW50cnk+CiAgICA8ZnVsbFVybCB2YWx1ZT0iaHR0cDovL2V4YW1wbGUub3JnL2ZoaXIvUHJhY3RpdGlvbmVyL3ByYWN0aXRpb25lci11cy1jb3JlLWhlbnJ5LXNldmVuIiAvPgogICAgPHJlc291cmNlPgogICAgICA8UHJhY3RpdGlvbmVyPgogICAgICAgIDxpZCB2YWx1ZT0icHJhY3RpdGlvbmVyLXVzLWNvcmUtaGVucnktc2V2ZW4iIC8+CiAgICAgICAgPG1ldGE+CiAgICAgICAgICA8dmVyc2lvbklkIHZhbHVlPSI1IiAvPgogICAgICAgICAgPGxhc3RVcGRhdGVkIHZhbHVlPSIyMDIxLTA4LTE3VDA4OjAwOjMyLjM1NiswMDowMCIgLz4KICAgICAgICAgIDxzb3VyY2UgdmFsdWU9IiMyTWZBNmtJam1PbXRBbEliIiAvPgogICAgICAgICAgPHByb2ZpbGUgdmFsdWU9Imh0dHA6Ly9obDcub3JnL2ZoaXIvdXMvY29yZS9TdHJ1Y3R1cmVEZWZpbml0aW9uL3VzLWNvcmUtcHJhY3RpdGlvbmVyIiAvPgogICAgICAgIDwvbWV0YT4KICAgICAgICA8aWRlbnRpZmllcj4KICAgICAgICAgIDxzeXN0ZW0gdmFsdWU9Imh0dHA6Ly9obDcub3JnL2ZoaXIvc2lkL3VzLW5waSIgLz4KICAgICAgICAgIDx2YWx1ZSB2YWx1ZT0iOTk0MTMzOTEwOCIgLz4KICAgICAgICA8L2lkZW50aWZpZXI+CiAgICAgICAgPG5hbWU+CiAgICAgICAgICA8ZmFtaWx5IHZhbHVlPSJIZW5yeSIgLz4KICAgICAgICAgIDxnaXZlbiB2YWx1ZT0iU2V2ZW4iIC8+CiAgICAgICAgICA8c3VmZml4IHZhbHVlPSJNLkQuIiAvPgogICAgICAgIDwvbmFtZT4KICAgICAgICA8dGVsZWNvbT4KICAgICAgICAgIDxzeXN0ZW0gdmFsdWU9ImVtYWlsIiAvPgogICAgICAgICAgPHZhbHVlIHZhbHVlPSJoZW5yeS5zZXZlbkBleGFtcGxlLmNvbSIgLz4KICAgICAgICA8L3RlbGVjb20+CiAgICAgICAgPGFkZHJlc3M+CiAgICAgICAgICA8bGluZSB2YWx1ZT0iQk1hc3MgRG9jdG9ycyIgLz4KICAgICAgICAgIDxsaW5lIHZhbHVlPSIyMTAwIE5vcnRoIEF2ZSIgLz4KICAgICAgICAgIDxjaXR5IHZhbHVlPSJCdXJsaW5ndG9uIiAvPgogICAgICAgICAgPHN0YXRlIHZhbHVlPSJNQSIgLz4KICAgICAgICAgIDxwb3N0YWxDb2RlIHZhbHVlPSIwMjM2OCIgLz4KICAgICAgICAgIDxjb3VudHJ5IHZhbHVlPSJVUyIgLz4KICAgICAgICA8L2FkZHJlc3M+CiAgICAgIDwvUHJhY3RpdGlvbmVyPgogICAgPC9yZXNvdXJjZT4KICA8L2VudHJ5PgogIDxlbnRyeT4KICAgIDxmdWxsVXJsIHZhbHVlPSJodHRwOi8vZXhhbXBsZS5vcmcvZmhpci9PYnNlcnZhdGlvbi9vYnNlcnZhdGlvbi1yci1laWNyLXByb2Nlc3Npbmctc3RhdHVzIiAvPgogICAgPHJlc291cmNlPgogICAgICA8T2JzZXJ2YXRpb24geG1sbnM9Imh0dHA6Ly9obDcub3JnL2ZoaXIiPgogICAgICAgIDxpZCB2YWx1ZT0ib2JzZXJ2YXRpb24tcnItZWljci1wcm9jZXNzaW5nLXN0YXR1cyIgLz4KICAgICAgICA8bWV0YT4KICAgICAgICAgIDx2ZXJzaW9uSWQgdmFsdWU9IjciIC8+CiAgICAgICAgICA8bGFzdFVwZGF0ZWQgdmFsdWU9IjIwMjEtMDgtMTdUMDc6NTk6MDAuOTIwKzAwOjAwIiAvPgogICAgICAgICAgPHNvdXJjZSB2YWx1ZT0iI3FlYm4yT3RSN015eVVCbG0iIC8+CiAgICAgICAgICA8cHJvZmlsZSB2YWx1ZT0iaHR0cDovL2hsNy5vcmcvZmhpci91cy9lY3IvU3RydWN0dXJlRGVmaW5pdGlvbi9yci1laWNyLXByb2Nlc3Npbmctc3RhdHVzLW9ic2VydmF0aW9uIiAvPgogICAgICAgIDwvbWV0YT4KICAgICAgICA8c3RhdHVzIHZhbHVlPSJmaW5hbCIgLz4KICAgICAgICA8Y29kZT4KICAgICAgICAgIDxjb2Rpbmc+CiAgICAgICAgICAgIDxzeXN0ZW0gdmFsdWU9InVybjpvaWQ6Mi4xNi44NDAuMS4xMTQyMjIuNC41LjI3NCIgLz4KICAgICAgICAgICAgPGNvZGUgdmFsdWU9IlJSVlMyMCIgLz4KICAgICAgICAgICAgPGRpc3BsYXkgdmFsdWU9ImVJQ1Igd2FzIHByb2Nlc3NlZCAtIHdpdGggYSB3YXJuaW5nIiAvPgogICAgICAgICAgPC9jb2Rpbmc+CiAgICAgICAgPC9jb2RlPgogICAgICAgIDxoYXNNZW1iZXI+CiAgICAgICAgICA8cmVmZXJlbmNlIHZhbHVlPSJPYnNlcnZhdGlvbi9vYnNlcnZhdGlvbi1yci1laWNyLXByb2Nlc3Npbmctc3RhdHVzLXJlYXNvbiIgLz4KICAgICAgICA8L2hhc01lbWJlcj4KICAgICAgPC9PYnNlcnZhdGlvbj4KICAgIDwvcmVzb3VyY2U+CiAgPC9lbnRyeT4KICA8ZW50cnk+CiAgICA8ZnVsbFVybCB2YWx1ZT0iaHR0cDovL2V4YW1wbGUub3JnL2ZoaXIvT2JzZXJ2YXRpb24vb2JzZXJ2YXRpb24tcnItZWljci1wcm9jZXNzaW5nLXN0YXR1cy1yZWFzb24iIC8+CiAgICA8cmVzb3VyY2U+CiAgICAgIDxPYnNlcnZhdGlvbiB4bWxucz0iaHR0cDovL2hsNy5vcmcvZmhpciI+CiAgICAgICAgPGlkIHZhbHVlPSJvYnNlcnZhdGlvbi1yci1laWNyLXByb2Nlc3Npbmctc3RhdHVzLXJlYXNvbiIgLz4KICAgICAgICA8bWV0YT4KICAgICAgICAgIDx2ZXJzaW9uSWQgdmFsdWU9IjYiIC8+CiAgICAgICAgICA8bGFzdFVwZGF0ZWQgdmFsdWU9IjIwMjEtMDgtMTdUMDc6NTk6MDAuODgxKzAwOjAwIiAvPgogICAgICAgICAgPHNvdXJjZSB2YWx1ZT0iI3Z1WjNOVGtKenU1TVhuYksiIC8+CiAgICAgICAgICA8cHJvZmlsZSB2YWx1ZT0iaHR0cDovL2hsNy5vcmcvZmhpci91cy9lY3IvU3RydWN0dXJlRGVmaW5pdGlvbi9yci1laWNyLXByb2Nlc3Npbmctc3RhdHVzLXJlYXNvbi1vYnNlcnZhdGlvbiIgLz4KICAgICAgICA8L21ldGE+CiAgICAgICAgPHN0YXR1cyB2YWx1ZT0iZmluYWwiIC8+CiAgICAgICAgPGNvZGU+CiAgICAgICAgICA8Y29kaW5nPgogICAgICAgICAgICA8c3lzdGVtIHZhbHVlPSJ1cm46b2lkOjIuMTYuODQwLjEuMTE0MjIyLjQuNS4yMzIiIC8+CiAgICAgICAgICAgIDxjb2RlIHZhbHVlPSJSUjYiIC8+CiAgICAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJlSUNSIFByb2Nlc3NpbmcgU3RhdHVzIFJlYXNvbiIgLz4KICAgICAgICAgIDwvY29kaW5nPgogICAgICAgIDwvY29kZT4KICAgICAgICA8dmFsdWVDb2RlYWJsZUNvbmNlcHQ+CiAgICAgICAgICA8Y29kaW5nPgogICAgICAgICAgICA8c3lzdGVtIHZhbHVlPSJ1cm46b2lkOjIuMTYuODQwLjEuMTE0MjIyLjQuNS4yNzQiIC8+CiAgICAgICAgICAgIDxjb2RlIHZhbHVlPSJSUlZTMzAiIC8+CiAgICAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJlSUNSIHdhcyBwcm9jZXNzZWQgd2l0aCB0aGUgd2FybmluZyBvZjogaW5hY3RpdmUgUkNUQyBjb2RlIiAvPgogICAgICAgICAgPC9jb2Rpbmc+CiAgICAgICAgPC92YWx1ZUNvZGVhYmxlQ29uY2VwdD4KICAgICAgICA8Y29tcG9uZW50PgogICAgICAgICAgPGNvZGU+CiAgICAgICAgICAgIDxjb2Rpbmc+CiAgICAgICAgICAgICAgPHN5c3RlbSB2YWx1ZT0idXJuOm9pZDoyLjE2Ljg0MC4xLjExNDIyMi40LjUuMjc0IiAvPgogICAgICAgICAgICAgIDxjb2RlIHZhbHVlPSJSUlZTMzIiIC8+CiAgICAgICAgICAgICAgPGRpc3BsYXkgdmFsdWU9IkluYWN0aXZlIFJDVEMgY29kZSBkZXRhaWwiIC8+CiAgICAgICAgICAgIDwvY29kaW5nPgogICAgICAgICAgPC9jb2RlPgogICAgICAgICAgPHZhbHVlQ29kZWFibGVDb25jZXB0PgogICAgICAgICAgICA8Y29kaW5nPgogICAgICAgICAgICAgIDxzeXN0ZW0gdmFsdWU9Imh0dHA6Ly9zbm9tZWQuaW5mby9zY3QiIC8+CiAgICAgICAgICAgICAgPGNvZGUgdmFsdWU9IjY5MDkyMDAxIiAvPgogICAgICAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJMZXB0b3NwaXJvc2lzIGljdGVyb2hlbW9ycmhhZ2ljYSAoZGlzb3JkZXIpIiAvPgogICAgICAgICAgICA8L2NvZGluZz4KICAgICAgICAgIDwvdmFsdWVDb2RlYWJsZUNvbmNlcHQ+CiAgICAgICAgPC9jb21wb25lbnQ+CiAgICAgIDwvT2JzZXJ2YXRpb24+CiAgICA8L3Jlc291cmNlPgogIDwvZW50cnk+CiAgPGVudHJ5PgogICAgPGZ1bGxVcmwgdmFsdWU9Imh0dHA6Ly9leGFtcGxlLm9yZy9maGlyL0RvY3VtZW50UmVmZXJlbmNlL2RvY3VtZW50cmVmZXJlbmNlLWFkZC1yZXBvcnRpbmctbmVlZHMtcGRmIiAvPgogICAgPHJlc291cmNlPgogICAgICA8RG9jdW1lbnRSZWZlcmVuY2UgeG1sbnM9Imh0dHA6Ly9obDcub3JnL2ZoaXIiPgogICAgICAgIDxpZCB2YWx1ZT0iZG9jdW1lbnRyZWZlcmVuY2UtYWRkLXJlcG9ydGluZy1uZWVkcy1wZGYiIC8+CiAgICAgICAgPG1ldGE+CiAgICAgICAgICA8dmVyc2lvbklkIHZhbHVlPSIyIiAvPgogICAgICAgICAgPGxhc3RVcGRhdGVkIHZhbHVlPSIyMDIxLTA4LTEzVDAzOjU0OjM3LjU4MCswMDowMCIgLz4KICAgICAgICAgIDxzb3VyY2UgdmFsdWU9IiNDS0c0SXA5aGNBWUh3STViIiAvPgogICAgICAgICAgPHByb2ZpbGUgdmFsdWU9Imh0dHA6Ly9obDcub3JnL2ZoaXIvdXMvZWNyL1N0cnVjdHVyZURlZmluaXRpb24vcnItZG9jdW1lbnRyZWZlcmVuY2UiIC8+CiAgICAgICAgPC9tZXRhPgogICAgICAgIDxleHRlbnNpb24gdXJsPSJodHRwOi8vaGw3Lm9yZy9maGlyL3VzL2Vjci9TdHJ1Y3R1cmVEZWZpbml0aW9uL3JyLXByaW9yaXR5LWV4dGVuc2lvbiI+CiAgICAgICAgICA8dmFsdWVDb2RlYWJsZUNvbmNlcHQ+CiAgICAgICAgICAgIDxjb2Rpbmc+CiAgICAgICAgICAgICAgPHN5c3RlbSB2YWx1ZT0idXJuOm9pZDoyLjE2Ljg0MC4xLjExNDIyMi40LjUuMjc0IiAvPgogICAgICAgICAgICAgIDxjb2RlIHZhbHVlPSJSUlZTMTYiIC8+CiAgICAgICAgICAgICAgPGRpc3BsYXkgdmFsdWU9IkFjdGlvbiByZXF1ZXN0ZWQiIC8+CiAgICAgICAgICAgIDwvY29kaW5nPgogICAgICAgICAgPC92YWx1ZUNvZGVhYmxlQ29uY2VwdD4KICAgICAgICA8L2V4dGVuc2lvbj4KICAgICAgICA8c3RhdHVzIHZhbHVlPSJjdXJyZW50IiAvPgogICAgICAgIDx0eXBlPgogICAgICAgICAgPGNvZGluZz4KICAgICAgICAgICAgPHN5c3RlbSB2YWx1ZT0iaHR0cDovL2xvaW5jLm9yZyIgLz4KICAgICAgICAgICAgPGNvZGUgdmFsdWU9IjgzOTEwLTAiIC8+CiAgICAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJQdWJsaWMgaGVhbHRoIE5vdGUiIC8+CiAgICAgICAgICA8L2NvZGluZz4KICAgICAgICAgIDx0ZXh0IHZhbHVlPSJQdWJsaWMgaGVhbHRoIGluZm9ybWF0aW9uIiAvPgogICAgICAgIDwvdHlwZT4KICAgICAgICA8Y2F0ZWdvcnk+CiAgICAgICAgICA8Y29kaW5nPgogICAgICAgICAgICA8c3lzdGVtIHZhbHVlPSJ1cm46b2lkOjIuMTYuODQwLjEuMTE0MjIyLjQuNS4yNzQiIC8+CiAgICAgICAgICAgIDxjb2RlIHZhbHVlPSJSUlZTOCIgLz4KICAgICAgICAgICAgPGRpc3BsYXkgdmFsdWU9IkFkZGl0aW9uYWwgcmVwb3J0aW5nIG5lZWRzIiAvPgogICAgICAgICAgPC9jb2Rpbmc+CiAgICAgICAgICA8dGV4dCB2YWx1ZT0iQWRkaXRpb25hbCByZXBvcnRpbmcgbmVlZHMiIC8+CiAgICAgICAgPC9jYXRlZ29yeT4KICAgICAgICA8c3ViamVjdD4KICAgICAgICAgIDxyZWZlcmVuY2UgdmFsdWU9IlBhdGllbnQvcGF0aWVudC1lY3ItZXZlLWV2ZXJ5d29tYW4iIC8+CiAgICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iRXZlIEV2ZXJ5d29tYW4iIC8+CiAgICAgICAgPC9zdWJqZWN0PgogICAgICAgIDxkZXNjcmlwdGlvbiB2YWx1ZT0iQWRkaXRpb25hbCBpbmZvcm1hdGlvbiBmb3IgdGhlIHJlcXVpcmVkIHJlcG9ydGluZyBvZiBaaWthIG11c3QgYmUgc3VibWl0dGVkIHRvIFN0YXRlIERlcGFydG1lbnQgb2YgSGVhbHRoIGltbWVkaWF0ZWx5LiBUaGlzIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gY2FuIGJlIHN1Ym1pdHRlZCBoZXJlLiIgLz4KICAgICAgICA8Y29udGVudD4KICAgICAgICAgIDxhdHRhY2htZW50PgogICAgICAgICAgICA8Y29udGVudFR5cGUgdmFsdWU9ImFwcGxpY2F0aW9uL3BkZiIgLz4KICAgICAgICAgICAgPHVybCB2YWx1ZT0iaHR0cDovL3N0YXRlZGVwYXJ0bWVudG9maGVhbHRoLmdvdi9lcGkvZGlzZWFzZS96aWthL1N1cHBsZW1lbnRhbF9kYXRhX2Zvcm0ucGRmIiAvPgogICAgICAgICAgPC9hdHRhY2htZW50PgogICAgICAgIDwvY29udGVudD4KICAgICAgPC9Eb2N1bWVudFJlZmVyZW5jZT4KICAgIDwvcmVzb3VyY2U+CiAgPC9lbnRyeT4KICA8ZW50cnk+CiAgICA8ZnVsbFVybCB2YWx1ZT0iaHR0cDovL2V4YW1wbGUub3JnL2ZoaXIvRG9jdW1lbnRSZWZlcmVuY2UvZG9jdW1lbnRyZWZlcmVuY2UtemlrYS1mb2xsb3ctdXAtcGRmIiAvPgogICAgPHJlc291cmNlPgogICAgICA8RG9jdW1lbnRSZWZlcmVuY2UgeG1sbnM9Imh0dHA6Ly9obDcub3JnL2ZoaXIiPgogICAgICAgIDxpZCB2YWx1ZT0iZG9jdW1lbnRyZWZlcmVuY2UtemlrYS1mb2xsb3ctdXAtcGRmIiAvPgogICAgICAgIDxtZXRhPgogICAgICAgICAgPHZlcnNpb25JZCB2YWx1ZT0iMiIgLz4KICAgICAgICAgIDxsYXN0VXBkYXRlZCB2YWx1ZT0iMjAyMS0wOC0xM1QwMzo1NTowNS45NjQrMDA6MDAiIC8+CiAgICAgICAgICA8c291cmNlIHZhbHVlPSIjNVdxaUlxdERrS3c2VDZrcCIgLz4KICAgICAgICAgIDxwcm9maWxlIHZhbHVlPSJodHRwOi8vaGw3Lm9yZy9maGlyL3VzL2Vjci9TdHJ1Y3R1cmVEZWZpbml0aW9uL3JyLWRvY3VtZW50cmVmZXJlbmNlIiAvPgogICAgICAgIDwvbWV0YT4KICAgICAgICA8ZXh0ZW5zaW9uIHVybD0iaHR0cDovL2hsNy5vcmcvZmhpci91cy9lY3IvU3RydWN0dXJlRGVmaW5pdGlvbi9yci1wcmlvcml0eS1leHRlbnNpb24iPgogICAgICAgICAgPHZhbHVlQ29kZWFibGVDb25jZXB0PgogICAgICAgICAgICA8Y29kaW5nPgogICAgICAgICAgICAgIDxzeXN0ZW0gdmFsdWU9InVybjpvaWQ6Mi4xNi44NDAuMS4xMTQyMjIuNC41LjI3NCIgLz4KICAgICAgICAgICAgICA8Y29kZSB2YWx1ZT0iUlJWUzE4IiAvPgogICAgICAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJJbW1lZGlhdGUgYWN0aW9uIHJlcXVlc3RlZCIgLz4KICAgICAgICAgICAgPC9jb2Rpbmc+CiAgICAgICAgICA8L3ZhbHVlQ29kZWFibGVDb25jZXB0PgogICAgICAgIDwvZXh0ZW5zaW9uPgogICAgICAgIDxzdGF0dXMgdmFsdWU9ImN1cnJlbnQiIC8+CiAgICAgICAgPHR5cGU+CiAgICAgICAgICA8Y29kaW5nPgogICAgICAgICAgICA8c3lzdGVtIHZhbHVlPSJodHRwOi8vbG9pbmMub3JnIiAvPgogICAgICAgICAgICA8Y29kZSB2YWx1ZT0iODM5MTAtMCIgLz4KICAgICAgICAgICAgPGRpc3BsYXkgdmFsdWU9IlB1YmxpYyBoZWFsdGggTm90ZSIgLz4KICAgICAgICAgIDwvY29kaW5nPgogICAgICAgICAgPHRleHQgdmFsdWU9IlB1YmxpYyBoZWFsdGggaW5mb3JtYXRpb24iIC8+CiAgICAgICAgPC90eXBlPgogICAgICAgIDxjYXRlZ29yeT4KICAgICAgICAgIDxjb2Rpbmc+CiAgICAgICAgICAgIDxzeXN0ZW0gdmFsdWU9InVybjpvaWQ6Mi4xNi44NDAuMS4xMTQyMjIuNC41LjI3NCIgLz4KICAgICAgICAgICAgPGNvZGUgdmFsdWU9IlJSVlMxMCIgLz4KICAgICAgICAgICAgPGRpc3BsYXkgdmFsdWU9IlRyZWF0bWVudCBhbmQvb3IgcHJldmVudGlvbiIgLz4KICAgICAgICAgIDwvY29kaW5nPgogICAgICAgICAgPHRleHQgdmFsdWU9IlRyZWF0bWVudCBhbmQvb3IgcHJldmVudGlvbiIgLz4KICAgICAgICA8L2NhdGVnb3J5PgogICAgICAgIDxzdWJqZWN0PgogICAgICAgICAgPHJlZmVyZW5jZSB2YWx1ZT0iUGF0aWVudC9wYXRpZW50LWVjci1ldmUtZXZlcnl3b21hbiIgLz4KICAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJFdmUgRXZlcnl3b21hbiIgLz4KICAgICAgICA8L3N1YmplY3Q+CiAgICAgICAgPGRlc2NyaXB0aW9uIHZhbHVlPSJaaWthIGhhcyBwYXJ0aWN1bGFyIHJpc2tzIGZvciBwcmVnbmFudCB3b21lbi4gRm9sbG93LXVwIGd1aWRhbmNlIGZvciBwcmVnbmFudCB3b21lbiBhbmQgY291cGxlcyB3aG8gYXJlIHBsYW5uaW5nIHByZWduYW5jeS4iIC8+CiAgICAgICAgPGNvbnRlbnQ+CiAgICAgICAgICA8YXR0YWNobWVudD4KICAgICAgICAgICAgPGNvbnRlbnRUeXBlIHZhbHVlPSJhcHBsaWNhdGlvbi9wZGYiIC8+CiAgICAgICAgICAgIDx1cmwgdmFsdWU9Imh0dHA6Ly9zdGF0ZWRlcGFydG1lbnRvZmhlYWx0aC5nb3YvZXBpL2Rpc2Vhc2VzL3ppa2EvWmlrYV9WaXJ1c19UZXN0aW5nX0d1aWRhbmNlLnBkZiIgLz4KICAgICAgICAgIDwvYXR0YWNobWVudD4KICAgICAgICA8L2NvbnRlbnQ+CiAgICAgIDwvRG9jdW1lbnRSZWZlcmVuY2U+CiAgICA8L3Jlc291cmNlPgogIDwvZW50cnk+CiAgPGVudHJ5PgogICAgPGZ1bGxVcmwgdmFsdWU9Imh0dHA6Ly9leGFtcGxlLm9yZy9maGlyL0RvY3VtZW50UmVmZXJlbmNlL2RvY3VtZW50cmVmZXJlbmNlLXppa2EtaW5mby1wZGYiIC8+CiAgICA8cmVzb3VyY2U+CiAgICAgIDxEb2N1bWVudFJlZmVyZW5jZSB4bWxucz0iaHR0cDovL2hsNy5vcmcvZmhpciI+CiAgICAgICAgPGlkIHZhbHVlPSJkb2N1bWVudHJlZmVyZW5jZS16aWthLWluZm8tcGRmIiAvPgogICAgICAgIDxtZXRhPgogICAgICAgICAgPHZlcnNpb25JZCB2YWx1ZT0iMiIgLz4KICAgICAgICAgIDxsYXN0VXBkYXRlZCB2YWx1ZT0iMjAyMS0wOC0xM1QwMzo1NTowNS45NjQrMDA6MDAiIC8+CiAgICAgICAgICA8c291cmNlIHZhbHVlPSIjVUhGR3BiTXZ2Q2pxRXFuVCIgLz4KICAgICAgICAgIDxwcm9maWxlIHZhbHVlPSJodHRwOi8vaGw3Lm9yZy9maGlyL3VzL2Vjci9TdHJ1Y3R1cmVEZWZpbml0aW9uL3JyLWRvY3VtZW50cmVmZXJlbmNlIiAvPgogICAgICAgIDwvbWV0YT4KICAgICAgICA8ZXh0ZW5zaW9uIHVybD0iaHR0cDovL2hsNy5vcmcvZmhpci91cy9lY3IvU3RydWN0dXJlRGVmaW5pdGlvbi9yci1wcmlvcml0eS1leHRlbnNpb24iPgogICAgICAgICAgPHZhbHVlQ29kZWFibGVDb25jZXB0PgogICAgICAgICAgICA8Y29kaW5nPgogICAgICAgICAgICAgIDxzeXN0ZW0gdmFsdWU9InVybjpvaWQ6Mi4xNi44NDAuMS4xMTQyMjIuNC41LjI3NCIgLz4KICAgICAgICAgICAgICA8Y29kZSB2YWx1ZT0iUlJWUzE3IiAvPgogICAgICAgICAgICAgIDxkaXNwbGF5IHZhbHVlPSJJbW1lZGlhdGUgYWN0aW9uIHJlcXVpcmVkIiAvPgogICAgICAgICAgICA8L2NvZGluZz4KICAgICAgICAgIDwvdmFsdWVDb2RlYWJsZUNvbmNlcHQ+CiAgICAgICAgPC9leHRlbnNpb24+CiAgICAgICAgPHN0YXR1cyB2YWx1ZT0iY3VycmVudCIgLz4KICAgICAgICA8dHlwZT4KICAgICAgICAgIDxjb2Rpbmc+CiAgICAgICAgICAgIDxzeXN0ZW0gdmFsdWU9Imh0dHA6Ly9sb2luYy5vcmciIC8+CiAgICAgICAgICAgIDxjb2RlIHZhbHVlPSI4MzkxMC0wIiAvPgogICAgICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iUHVibGljIGhlYWx0aCBOb3RlIiAvPgogICAgICAgICAgPC9jb2Rpbmc+CiAgICAgICAgICA8dGV4dCB2YWx1ZT0iUHVibGljIGhlYWx0aCBpbmZvcm1hdGlvbiIgLz4KICAgICAgICA8L3R5cGU+CiAgICAgICAgPGNhdGVnb3J5PgogICAgICAgICAgPGNvZGluZz4KICAgICAgICAgICAgPHN5c3RlbSB2YWx1ZT0idXJuOm9pZDoyLjE2Ljg0MC4xLjExNDIyMi40LjUuMjc0IiAvPgogICAgICAgICAgICA8Y29kZSB2YWx1ZT0iUlJWUzEzIiAvPgogICAgICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iT3V0YnJlYWstIG9yIENsdXN0ZXIgUmVsYXRlZCIgLz4KICAgICAgICAgIDwvY29kaW5nPgogICAgICAgICAgPHRleHQgdmFsdWU9Ik91dGJyZWFrLSBvciBDbHVzdGVyIFJlbGF0ZWQiIC8+CiAgICAgICAgPC9jYXRlZ29yeT4KICAgICAgICA8c3ViamVjdD4KICAgICAgICAgIDxyZWZlcmVuY2UgdmFsdWU9IlBhdGllbnQvcGF0aWVudC1lY3ItZXZlLWV2ZXJ5d29tYW4iIC8+CiAgICAgICAgICA8ZGlzcGxheSB2YWx1ZT0iRXZlIEV2ZXJ5d29tYW4iIC8+CiAgICAgICAgPC9zdWJqZWN0PgogICAgICAgIDxkZXNjcmlwdGlvbiB2YWx1ZT0iTG9jYWwgbW9zcXVpdG8tYm9ybmUgWmlrYSB2aXJ1cyBjcmVhdGlvbiB3YXMgcmVwb3J0ZWQgaW4geW91ciBhcmVhLiBJbmNyZWFzZWQgd2F0Y2hmdWxuZXNzIGZvciBzeW1wdG9tcyBvZiBaaWthIHZpcnVzIGluIHlvdXIgcGF0aWVudHMgaXMgd2FycmFudGVkLiIgLz4KICAgICAgICA8Y29udGVudD4KICAgICAgICAgIDxhdHRhY2htZW50PgogICAgICAgICAgICA8Y29udGVudFR5cGUgdmFsdWU9ImFwcGxpY2F0aW9uL3BkZiIgLz4KICAgICAgICAgICAgPHVybCB2YWx1ZT0iaHR0cDovL3N0YXRlZGVwYXJ0bWVudG9maGVhbHRoLmdvdi9lcGkvZGlzZWFzZS96aWthL291dGJyZWFraW5mby5wZGYiIC8+CiAgICAgICAgICA8L2F0dGFjaG1lbnQ+CiAgICAgICAgPC9jb250ZW50PgogICAgICA8L0RvY3VtZW50UmVmZXJlbmNlPgogICAgPC9yZXNvdXJjZT4KICA8L2VudHJ5Pgo8L0J1bmRsZT4="